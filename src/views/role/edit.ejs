<!-- ---------------------------------edit edit------------------------------------ -->
<div class="edit-model-blar" style="
position: fixed;/* position: absolute; */left: 0;right: 0;top: 0;bottom: 0;z-index: 80;background-color: rgba(255, 255, 255, 0.096);backdrop-filter: blur(2px);cursor: pointer;display: none;">
</div>
<div class="" id="edit-user-modal" style="display: none;">
  <div class="modal">
    <a href="#" onclick="close_edit_model()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>edit role</h2>
    </div>
    <div class="modal-body">
      <form id="edit-user-form">
        <input id="Role" type="text" placeholder="enter role" name="role" />
        <p class="edit-error role-edit-error"></p>

          <p id="roleId" style="display: none;"></p>
          <input type="submit" value="Submit" />
      </form>
    </div>

    <!-- </div> -->
  </div>
</div>



<script>

  // edit edit handel 
  const editModel = document.querySelector("#edit-user-modal");
  const edit_model_blar = document.querySelector(".edit-model-blar");

  function open_Edit_Modal() {
    editModel.style.display = "block";
    edit_model_blar.style.display = "block";
  }

  function close_edit_model() {
    editModel.style.display = "none";
    edit_model_blar.style.display = "none";
  }
// open ana add prv value 
  function editHandel(edit, id) {
    open_Edit_Modal()

    const editinfo = edit.closest('.user_header');
    console.log("-------------------id---------------------",editinfo)
    // id set
    document.querySelector('#roleId').innerHTML =id;
    // Role set
    const Role = editinfo.querySelector('.Role').innerHTML
    console.log("Role",Role)
    document.querySelector('#Role').value =Role
  
  }

// server send information
  const form_edit = document.querySelector("#edit-user-form");
  form_edit.onsubmit = async function (event) {
    event.preventDefault();
    // clear errors first---------------------------->>
    const errorPlaceholders = document.querySelectorAll("p.edit-error");
    for (let i = 0; i < errorPlaceholders.length; i++) {
      errorPlaceholders[i].style.display = "none";
    }
    const inputErrors = document.querySelectorAll("input.error");
    if (inputErrors.length > 0) {
      for (let j = 0; j < inputErrors.length; j++) {
        inputErrors[j].classList.remove("error");
      }
    }
    // // ------------------------------------------>>

    const formData = new FormData(form_edit);
    const roleId = document.getElementById('roleId').innerHTML;
    let response = await fetch(`/api/role/${roleId}`, {
      method: "put",
      body: formData,
    });

    let responseData = await response.json();
    console.log("responseData---->",responseData);
    if (responseData.errors) {
      // errors
      await showToast(responseData?.message ? responseData?.message : 'Error',responseData.error ); 
      Object.keys(responseData.errors).forEach((fieldName) => {
        if (!(fieldName == "rowCol")) {
          form_edit[fieldName].classList.add("error");
        }
        const errorPlaceholder = document.querySelector(
          `.${fieldName}-edit-error`
        );
        errorPlaceholder.innerHTML =
          responseData.errors[fieldName].msg;

        // make all placeholders visible
        errorPlaceholder.style.display = "block";
      });
    } else {
      // success
      await showToast(responseData.msg ); 
      console.log("close");
      // successToast.showToast();
      close_edit_model();
      document.querySelector("p.edit-error").style.display = "none";

      // reload the page after 1 second
      setTimeout(() => {
        location.reload();
      },500);
    }
  };



</script>