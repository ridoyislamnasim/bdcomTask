<div class="edit-model-blar" style="
position: fixed;/* position: absolute; */left: 0;right: 0;top: 0;bottom: 0;z-index: 80;background-color: rgba(255, 255, 255, 0.096);backdrop-filter: blur(2px);cursor: pointer;display: none;">
</div>
<div class="subject-add-modal" id="edit-subject-modal" style="display: none;">
    <!-- <div class="modal"> -->
      <a href="#" onclick="closeSubjectEditModal()" class="modal-close">+</a>
      <div class="modal-title">
        <h2>Edit Room</h2>
      </div>
      <div class="modal-body">
        <form id="edit-subjects-form">
          <!-- edit level term  -->
          <div class="sublevalTermDiv">
            <!-- <input class="inputLevel" type="text" placeholder="Enter Level" name="level" /> -->
            <div class="dropdown">
              <input class="level  dropdown-toggle dropdown-toggle-subject " type="text" placeholder="Select Level" name="level" readonly="">
              <i class="bx bx-chevron-down"></i>
              <div class="dropdown-content dropdown-content-emp-profile">
                <div class="dropdown-option">L1</div>
                <div class="dropdown-option">L2</div>
                <div class="dropdown-option">L3</div>
                <div class="dropdown-option">L4</div>
              </div>
            </div>
            <p class="error level-error"></p>
            <!-- <input class="inputTerm" type="text" placeholder="Enter Term" name="term" /> -->
            <div class="dropdown">
              <input class="term dropdown-toggle dropdown-toggle-subject " type="text" placeholder="Select Level" name="term" readonly="">
              <i class="bx bx-chevron-down"></i>
              <div class="dropdown-content dropdown-content-emp-profile">
                <div class="dropdown-option">T1</div>
                <div class="dropdown-option">T2</div>
              </div>
            </div>
            <p class="error term-error"></p>
  
            <input class="batch dropdown-toggle-subject" oninput="BatchSearch(this)" type="text" name="batch" placeholder="Enter Batch (Batch-53)" value="" autocomplete="off">
            <div class="subjectBath-searchInfo"></div>
            <p class="error batch-error"></p>
  
          </div>
          <!-- edit level term  -->
          <!-- how row coloum -->
          <div id="howRowcloumsDiv">
            <div class="addRowCol">
              <div class="sectionNumber">
                <input class="howmanySection" type="number" placeholder="How many Section have ?" value="howmanySection" name="howmanySection" />
                <p class="error howmanySection-error"></p>
              </div>
              <div class="courseNumber">
                <input class="howmanyCourse" type="number" placeholder="How many Course have ?" value="howmanyCourse" name="howmanyCourse" />
                <p class="error howmanyCourse-error"></p>
              </div>
              <div class="sectionAdd">
                <a href="#" onclick="prv_remove_createCourseSectionInputFild()" class=" newadd">add</a>
              </div>
              <div class="closeDiv" style="display: none;">
                <div style="display: flex;">
                  <a href="#" onclick="prv_closeAll_CourseSectionInputFild()" class=" newrowcloumn newadd">clear</a>
                </div>
    
              </div>
            </div>
          </div>
    
    <!-- new section courses create -->
          <div class="prvSubjectInfoDiv newrowscloumns">
    
          </div>
        <p id="editSubjectId" style="display: none;"></p>                    
          </div>
          <input type="submit" value="Submit" />
        </form>
      </div>
    <!-- </div> -->
  </div>
</div>


<!-- edit part prv velue show  -->
<script> 
  // select the edit Model and Form
  const editSubjectsModal = document.querySelector("#edit-subject-modal");
  const edit_model_blar = document.querySelector(".model-blar");
  const editSubjectForm = document.querySelector("#edit-subjects-form");
  //  colse the model
  function closeSubjectEditModal() {
    editSubjectsModal.style.display = "none";
    edit_model_blar.style.display = "none";
  }

  async function roomEditHandel(event , id) {
    const prvSubjectInfoDiv = document.querySelector(".prvSubjectInfoDiv")
    // prv model clear 
    prvSubjectInfoDiv.innerHTML = ''
    // clear errors first---------------------------->>
    const errorPlaceholders = editSubjectForm.querySelectorAll("p.error");
      for (let i = 0; i < errorPlaceholders.length; i++) {
        errorPlaceholders[i].style.display = "none";
      }
   // clear the red border clear---------->>
      const inputErrors = editSubjectForm.querySelectorAll("input.error");
      if (inputErrors.length > 0) {
        for (let j = 0; j < inputErrors.length; j++) {
          inputErrors[j].classList.remove("error");
        }
      }
    // prv model clear  end

    // show the privious value in edit model
    console.log(event)

    editSubjectsModal.style.display = "block";
    edit_model_blar.style.display = "block";
    const oneLT = event.closest('.oneLT')
    console.log(oneLT)
    //id set  editSubjectId
    document.querySelector('#editSubjectId').innerHTML = id
    // level set 
    const level  = oneLT.querySelector('.level').innerHTML
    editSubjectForm.querySelector('.level').value = level
    // term set
    const term  = oneLT.querySelector('.term').innerHTML
    editSubjectForm.querySelector('.term').value = term
    // batch set
    const batch  = oneLT.querySelector('.batchInfo').innerHTML
    editSubjectForm.querySelector('.batch').value = batch
    // course section info set 
    const allSubjectCode = oneLT.querySelectorAll('.SubjectCode')
    const allSubjectName = oneLT.querySelectorAll('.SubjectName')
    const allsectionName = oneLT.querySelectorAll('.sectionName')
    const allreg_student = oneLT.querySelectorAll('.reg_student')
    const allteacherInitial = oneLT.querySelectorAll('.teacherInitial')
    // section number course number set
    document.querySelector('#howRowcloumsDiv').querySelector(".howmanySection").value =  (allsectionName.length / allSubjectCode.length) ;
    document.querySelector('#howRowcloumsDiv').querySelector(".howmanyCourse").value = allSubjectCode.length ;
    let sectionIndex = 0;
    console.log('allSubjectCode',  allSubjectCode.length)
    let prv_remove_newSectionHeader = `
    <div class="tableHeader">
        <span class="sectionNameHeader">Section</span>
        <span class="rg_studentHeader">Rg. Student</span>
        <span class="teacherInitailHeader">Teacher Initial</span>
    </div>
    `
    for (let index = 0; index < allSubjectCode.length; index++) {
      let oneGrupSection = allsectionName.length / allSubjectCode.length ;
      console.log("----",oneGrupSection)
      let prvNewAllSection = ''
      for (let index = 0; index < oneGrupSection; index++) {
        let newSection = `
            <div class="one_SectionInputDiv">
                <div class="SectionInfo">
                    <input type="text" class="sectionName[${sectionIndex}] sectionNameInput[${index}] inputTable" oninput='sectionNameSearch(this)' value = '${allsectionName[sectionIndex].innerHTML}' name='sectionName[]' autocomplete="off">
                    <div class="sectionName-searchInfo"></div>
                    <p class="error sectionName[${sectionIndex}]-error"></p>
                </div>
                <div class="SectionInfo">
                    <input type="number" class="rg_student[${sectionIndex}] rg_studentInput[${index}] inputTable" value = '${allreg_student[sectionIndex].innerHTML}'  name="rg_student[]" autocomplete="off">
                    <p class="error rg_student[${sectionIndex}]-error"></p>
                </div>
                <div class="SectionInfo">
                    <input type="text" class="teacherInitial[${sectionIndex}] teacherInitialInput[${index}] inputTable" oninput='tcInitialSearch(this)' value = '${allteacherInitial[sectionIndex].innerHTML}' name="teacherInitial[]" autocomplete="off">
                    <div class="teacherInitial-searchInfo"></div>
                    <p class="error teacherInitial[${sectionIndex}]-error"></p>
                </div>
            </div> `

        prvNewAllSection += newSection
        sectionIndex += 1
        // if (sectionIndex == howmanySection) {
        //   prvNewAllSection += `
        //   <div class="sectionNameRgStudenSame">
        //      <div class="sectionNameSame">
        //         Every Course Section Name are Same ?
        //           <input type="checkbox" id='Samecheckbox' class ='sameSectionName'  value='same'>           
        //      </div>
        //      <div class="sectionNameSame">
        //         Every Course Section Name are Same ?
        //           <input type="checkbox" id='Samecheckbox' class ='RgStudentSame'  value="Simple Room">           
        //      </div>
        //      <div class="sectionNameSame">
        //         <a href="javascript:void(0)" onclick="allSectionRgStudentSame(this)" class=" newrowcloumn newadd">Add</a>
        //     </div>
        //   </div>          `
        // }
      }
      prvNewAllSection += `<div class="underLineSubject"></div>`

      let prvCouseCodeName = ` 
               <div class="courseSectionInputDiv">
                    <div class="courseInputMainDiv">
                        <div class="courseInputDiv">
                            <div class="course">                            
                                <input type="text" placeholder="Enter Course Code" class="courseCode[0] inputCourseCode" oninput="CourseCodeSearch(this)" value ='${allSubjectCode[index].innerHTML}' name="courseCode[]" autocomplete="off">
                                <div class="courseCode-searchInfo"></div>
                                <p class="error courseCode[0]-error"></p>
                            </div>
                            <div class="course">
                                <input type="text" placeholder="Enter Course Name" class="CourseName[0] inputCourseName" id="CourseName[0]" value ='${allSubjectName[index].innerHTML}' name="CourseName[]" autocomplete="off">
                                <p class="error CourseName[0]-error"></p>
                            </div>
                        </div>
                        <div class="courseInputDiv">
                        </div>
                    </div>
                    ${prv_remove_newSectionHeader}
                    ${prvNewAllSection}
                </div>`
      prvNewAllSection = ''
      console.log(prvNewAllSection) 
      prvSubjectInfoDiv.innerHTML += prvCouseCodeName
      document.querySelector('#howRowcloumsDiv').querySelector(".sectionAdd").style.display = "none";
      document.querySelector('#howRowcloumsDiv').querySelector(".closeDiv").style.display = "block";
      document.querySelector('#howRowcloumsDiv').querySelector(".sectionNumber").style.display = "none";
      document.querySelector('#howRowcloumsDiv').querySelector(".courseNumber").style.display = "none";

  }

  }



  // -----------------------------edit and submit____________________________________>>
  editSubjectForm.onsubmit =async function(event){
      event.preventDefault();
   // clear errors first---------------------------->>
      const errorPlaceholders = document.querySelectorAll("p.error");
      for (let i = 0; i < errorPlaceholders.length; i++) {
        errorPlaceholders[i].style.display = "none";
      }
   // clear the red border clear---------->>
      const inputErrors = document.querySelectorAll("input.error");
      if (inputErrors.length > 0) {
        for (let j = 0; j < inputErrors.length; j++) {
          inputErrors[j].classList.remove("error");
        }
      }
// // ------------------------------------------>>
     const editSubjectId=  document.querySelector("#editSubjectId").innerHTML;  
     console.log('teacherEditId ,',editSubjectId)
    // face the data
     const formData = new FormData(editSubjectForm); 
      let response = await fetch(`/Administrator/subjects/${editSubjectId}`, {
      method: "post",
      body: formData,
      });
     let responseData =await response.json()
    console.log(responseData)
    // handle error and response
    if (responseData.errors) {
      // errors 
      console.log("working go");
      // console.log(fieldName)
      await showToast(responseData.msg, responseData.error); // Show the toast message for 9000 milliseconds (9 seconds)

      Object.keys(responseData.errors).forEach((fieldName) => {
        // add error class to all inputs
        // add error class to all inputs
       let edit_subjects_form =  document.querySelector('#edit-subjects-form')
        console.log("fieldName", fieldName);
        const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
        console.log("escapedFieldName", escapedFieldName);
        //  console.log("escapedFieldName",form[courseName]);
        //  console.log("escapedFieldName",form[inputCourseName]);
        const errorPlace = edit_subjects_form.querySelector(`.${escapedFieldName}`);
        errorPlace.classList.add("error");
        // if (!(fieldName == "rowCol")) {stu_courseName[0]
        // form[escapedFieldName].classList.add("error");
        // }

        // set all error placeholders (p tag) textContent
        const errorPlaceholder = edit_subjects_form.querySelector(`.${escapedFieldName}-error`);
        console.log("errorPlaceholderDown");
        console.log(errorPlaceholder);
        console.log();
        console.log("---------------------", fieldName)
        errorPlaceholder.innerHTML = responseData.errors[fieldName];

        // make all placeholders visible
        errorPlaceholder.style.display = "block";
        // ------------------------
      });
    } else {
      await showToast(responseData.msg, responseData.error); // Show the toast message for 9000 milliseconds (9 seconds)
      console.log("close");
      // successToast.showToast();
      closeSubjectAddModal();
      document.querySelector("p.error").style.display = "none";

      // reload the page after 1 second
      setTimeout(() => {
        location.reload();
      }, 100);
    }
  }
</script>
// prv_closeAll_CourseSectionInputFild
<script>
    function prv_closeAll_CourseSectionInputFild() {
    //   this.parentElement.remove();
    // get the parent element to be removed
    const parentElem = document.querySelector('.prvSubjectInfoDiv');

    // loop through each child element and remove it
    while (parentElem.firstChild) {
      parentElem.removeChild(parentElem.firstChild);
    }

    // remove the parent element itself
    // parentElem.remove();
    document.querySelector('#howRowcloumsDiv').querySelector(".sectionAdd").style.display = "block";
    document.querySelector('#howRowcloumsDiv').querySelector(".closeDiv").style.display = "none";
    document.querySelector('#howRowcloumsDiv').querySelector(".sectionNumber").style.display = "block";
    document.querySelector('#howRowcloumsDiv').querySelector(".courseNumber").style.display = "block";
    // document.querySelector(".sectionAdd").style.display = "block";
    // document.querySelector(".closeDiv").style.display = "none";
    // document.querySelector(".sectionNumber").style.display = "block";
    // document.querySelector(".courseNumber").style.display = "block";
    const howmanySection = document.querySelector('#howRowcloumsDiv').querySelector(".howmanySection")
    howmanySection.value = '';
    const newrowcloumn = document.querySelector('#howRowcloumsDiv').querySelector(".howmanyCourse")
    newrowcloumn.value = '';
    // newrowcloumn.style.display = "block";
    // howmanySection.style.display = "block";

  }
</script>
// //create course section fild
<script>
    //create course section fild
    function prv_remove_createCourseSectionInputFild(index) {
    const newExamDateAppend = document.querySelector(".prvSubjectInfoDiv")
    let prv_remove_newSectionHeader = `
    <div class="tableHeader">
        <span class="sectionNameHeader">Section</span>
        <span class="rg_studentHeader">Rg. Student</span>
        <span class="teacherInitailHeader">Teacher Initial</span>
    </div>
    `
    const howmanySection = document.querySelector('#howRowcloumsDiv').querySelector(".howmanySection").value
    console.log('-----', howmanySection)
    // course Input create
    let sectionIndex = 0;
    const newrowcloumn = document.querySelector('#howRowcloumsDiv').querySelector(".howmanyCourse").value
    for (let index = 0; index < newrowcloumn; index++) {
      // ---setion create
      let newAllSection = ''
      for (let index = 0; index < howmanySection; index++) {
        let newSection = `
            <div class="one_SectionInputDiv">
                <div class="SectionInfo">
                    <input type="text" class="sectionName[${sectionIndex}] sectionNameInput[${index}] inputTable" oninput='sectionNameSearch(this)' name='sectionName[]' autocomplete="off">
                    <div class="sectionName-searchInfo"></div>
                    <p class="error sectionName[${sectionIndex}]-error"></p>
                </div>
                <div class="SectionInfo">
                    <input type="number" class="rg_student[${sectionIndex}] rg_studentInput[${index}] inputTable"  name="rg_student[]" autocomplete="off">
                    <p class="error rg_student[${sectionIndex}]-error"></p>
                </div>
                <div class="SectionInfo">
                    <input type="text" class="teacherInitial[${sectionIndex}] teacherInitialInput[${index}] inputTable" oninput='tcInitialSearch(this)' name="teacherInitial[]" autocomplete="off">
                    <div class="teacherInitial-searchInfo"></div>
                    <p class="error teacherInitial[${sectionIndex}]-error"></p>
                </div>
            </div>
            `

        newAllSection += newSection
        sectionIndex += 1
        if (sectionIndex == howmanySection) {
          newAllSection += `
          <div class="sectionNameRgStudenSame">
             <div class="sectionNameSame">
                Every Course Section Name are Same ?
                  <input type="checkbox" id='Samecheckbox' class ='sameSectionName'  value='same'>           
             </div>
             <div class="sectionNameSame">
                Every Course Section Name are Same ?
                  <input type="checkbox" id='Samecheckbox' class ='RgStudentSame'  value="Simple Room">           
             </div>
             <div class="sectionNameSame">
                <a href="javascript:void(0)" onclick="allSectionRgStudentSame(this)" class=" newrowcloumn newadd">Add</a>
            </div>
          </div>          
             `
        }
      }
      newAllSection += `<div class="underLineSubject"></div>`
      // ---setion create
      let newCourseNameCode = `
                <div class="courseSectionInputDiv">
                    <div class="courseInputMainDiv">
                        <div class="courseInputDiv">
                            <div class="course">                            
                                <input type="text" placeholder="Enter Course Code" class="courseCode[${index}] inputCourseCode" oninput ='CourseCodeSearch(this)' name="courseCode[]" autocomplete="off">
                                <div class="courseCode-searchInfo"></div>
                                <p class="error courseCode[${index}]-error"></p>
                            </div>
                            <div class="course">
                                <input type="text" placeholder="Enter Course Name" class="CourseName[${index}] inputCourseName" id="CourseName[0]" name="CourseName[]" autocomplete="off">
                                <p class="error CourseName[${index}]-error"></p>
                            </div>
                        </div>
                        <div class="courseInputDiv">
                        </div>
                    </div>
                    ${prv_remove_newSectionHeader}
                    ${newAllSection}
                </div>
    `
      newExamDateAppend.innerHTML += newCourseNameCode

    }
    // newExamDateAppend.innerHTML += prv_remove_newSectionHeader
    // End course Input create

    document.querySelector('#howRowcloumsDiv').querySelector(".sectionAdd").style.display = "none";
    document.querySelector('#howRowcloumsDiv').querySelector(".closeDiv").style.display = "block";
    document.querySelector('#howRowcloumsDiv').querySelector(".sectionNumber").style.display = "none";
    document.querySelector('#howRowcloumsDiv').querySelector(".courseNumber").style.display = "none";


  }

</script>
//dropdown ----------------------------------
<script>
  //dropdown=---------------------------------- 
  console.log("-------------------------------------------dropdown-----------------------dropdown---------------------------dropdown----------------------------------dropdown---------")

  const editdropdownToggle = document.querySelectorAll('.dropdown-toggle');
  const editdropdownContent = document.querySelectorAll('.dropdown-content');
  const editdropdownOptions = document.querySelectorAll('.dropdown-option');
  console.log(editdropdownToggle)
  console.log(editdropdownToggle.length ,"editdropdownToggle.length")

  editdropdownToggle.forEach(function(toggle) {
    toggle.addEventListener('click', function() {
      // editdropdownContent.classList.remove('hide');
      this.parentElement.classList.toggle('show');
      this.parentElement.querySelector('.dropdown-content').classList.toggle('show')
    });
  });


  editdropdownOptions.forEach(function(option) {


    option.addEventListener('click', function() {
      const dropdown = this.closest('.dropdown');
      const toggle = dropdown.querySelector('.dropdown-toggle');
      const content = dropdown.querySelector('.dropdown-content');
      editdropdownOptions.forEach(function(opt) {
        opt.classList.remove('active');
        opt.style.backgroundColor = '';
      });
      this.style.backgroundColor = '#52d794';
      this.classList.add('active');
      toggle.value = this.textContent;
      content.classList.remove('show');
      dropdown.classList.remove('show');
    });


    option.addEventListener('mouseenter', function() {
      if (!this.classList.contains('active')) {
        this.style.backgroundColor = '#01B3BD';
      }
    });

    option.addEventListener('mouseleave', function() {
      if (!this.classList.contains('active')) {
        this.style.backgroundColor = '';
      }
    });
  });
  //dropdown ----------------------
</script>
