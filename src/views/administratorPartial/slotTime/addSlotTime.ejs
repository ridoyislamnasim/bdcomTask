<div class="model-blar" style="position: fixed;/* position: absolute; */left: 0;right: 0;top: 0;bottom: 0;z-index: 80;background-color: rgba(255, 255, 255, 0.096);backdrop-filter: blur(2px);cursor: pointer;display: none;">
</div>
<div  class="subject-add-modal" id="popup-model" style="display: none;">
    <!-- <div class="modal"> -->
        <a href="#" onclick="closeTimeSlotModal()" class="modal-close">+</a>
        <div class="modal-title">
            <h2>Add slot Time</h2>
        </div>
        <div class="modal-body">        
            <form id="add-timeSlot-form" action="/Administrator/timeslots" method="post">
                <div class="howManySlotDiv">
                    <div class="howManySlot" >
                        <h4><span> How many Slot create ?</span></h4>
                    <div class="d" style="display: flex;     align-items: center;">                        
                      <input class="howManySlotInput" id="howManySlotInput" type="number" placeholder="How many Slot Create" name="howManySlotInput" min="0" max="4" />
                      <a href="#" onclick="createSlot()" class=" howManySlot newadd">add</a>
                    </div>
                     <p class="error howManySlotInput-error"></p>
                    </div>
                </div>
                <div id="slotClearBtnDiv">

                </div>
                <div id="slotCreateDiv">
                    

                </div>
                <!-- <h4><span> Exam Slot name </span></h4>
                <input type="text" placeholder="Enter Slot Name " name="slotname" />
                <h4><span>Exam Start Time</span></h4>
                <input type="time" placeholder="Enter Exam Start Time" name="starttime" />
                <h4><span>Exam End Time(MM)</span></h4>
                <input type="time" placeholder="Enter Exam End Time" name="endtime" /> -->
                <input type="submit" value="Submit" />
            </form>
        <!-- </div> -->
    </div>
    
</div>
<script>
  function createSlot() {  
    const howManySlotInput = document.querySelector(".howManySlotInput")
    const slotClearBtnDiv = document.querySelector("#slotClearBtnDiv")
    const slotCreateDiv = document.querySelector("#slotCreateDiv")
    console.log("newrowcloumn", howManySlotInput.value)
    let howManySlot = howManySlotInput.value
    generatedSlot ='';

        for (let index = 0; index < howManySlot; index++) {
        generatedSlot += `
        <div class="oneSlotDiv">
                 <h4><span> Exam Slot name </span></h4>
                <input type="text" placeholder="Enter Slot Name " id="slotname[${index}]" name="slotname[]" />
                <p class="error slotname[${index}]-error"></p>
            <div class="oneSlotTime">
                <div class="starttime">
                    <h4><span>Exam Start Time</span></h4>
                    <input type="time" placeholder="Enter Exam Start Time"  id="starttime[${index}]" name="starttime[]" />
                    <p class="error starttime[${index}]-error"></p>
                </div>
                <div class="endtime">
                    <h4><span>Exam End Time(MM)</span></h4>
                    <input type="time" placeholder="Enter Exam End Time"  id="endtime[${index}]" name="endtime[]" />
                    <p class="error endtime[${index}]-error"></p>
                </div>
            </div>
        </div>
        `
    //   oneRowCol()
    }
    
    clearBtn =''
    if (howManySlot > 0) {
    clearBtn = `
                 <div class="closeDiv">
                      <div style="display: flex;">
                          <a href="#" onclick="closeAll_slot_InputFild()"
                              class=" newrowcloumn newadd">clear</a>
                      </div>
      
                  </div>
                  `
                        
    }
    slotClearBtnDiv.innerHTML = clearBtn
    slotCreateDiv.innerHTML = generatedSlot

  }
function closeAll_slot_InputFild(){
    slotClearBtnDiv.innerHTML = ''
    slotCreateDiv.innerHTML = ''
    var howManySlotInput = document.getElementById("howManySlotInput");
  howManySlotInput.value = '';
}
</script>
<script>
    // const modalTimeSlot = document.querySelector("#add-timeSlot-modal");
    const formTimeSlot = document.querySelector("#add-timeSlot-form");
    console.log(formTimeSlot)

    const popupModel = document.querySelector("#popup-model");
    const addExamDateAndSlotmModalBlar = document.querySelector(".model-blar");
    // Function to show a toast message
    function showToast(message, isError = false) {
  Toastify({
    text: message,
    duration: 500,
    backgroundColor: isError ? "#f44336" : "",
  }).showToast();
}

    function closeTimeSlotModal() {
        popupModel.style.display = "none";
        addExamDateAndSlotmModalBlar.style.display = "none";
    }
    function openTimeSlotModal() {
        popupModel.style.display = "block";
        addExamDateAndSlotmModalBlar.style.display = "block";
    }

    formTimeSlot.onsubmit = async function (event) {
        event.preventDefault();
        // clear errors first---------------------------->>
        const errorPlaceholders = document.querySelectorAll("p.error");
        console.log("errorPlaceholders");
        console.log(errorPlaceholders);
        //    clear errors first---------------------------->>
        for (let i = 0; i < errorPlaceholders.length; i++) {
            errorPlaceholders[i].style.display = "none";
        }

        const inputErrors = document.querySelectorAll("input.error");
        console.log("inputErrors");
        console.log(inputErrors);
        // clear errors red border first---------------------------->>
        if (inputErrors.length > 0) {
            for (let j = 0; j < inputErrors.length; j++) {
                inputErrors[j].classList.remove("error");
            }
        }
        // // ------------------------------------------>>

        const formData = new FormData(formTimeSlot);
        console.log("formData");
        console.log(formData);
        // send the request to server
        let response = await fetch("/Administrator/soltTime", {
            method: "post",
            body: formData,
        });
        let responseData = await response.json();
        console.log("resultr");
        console.log("resultr", responseData);
        // handle error and response
        if (responseData.errors) {
            await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)

            // errors
            console.log("working go");
            // console.log(fieldName)

            Object.keys(responseData.errors).forEach((fieldName) => {
                // add error class to all inputs
            console.log(fieldName)
            console.log(formTimeSlot) 
            const escapedFieldName = fieldName.replace(/\[/g, '\\\[').replace(/\]/g, '\\\]');
            const elementById = document.getElementById(`${fieldName}`);
      elementById.classList.add("error");
            console.log("--",elementById) 

            console.log(escapedFieldName) 
            console.log(document.getElementById(escapedFieldName))
            console.log(document.querySelector(`.escapedFieldName`))
            console.log(formTimeSlot[escapedFieldName])
            // formTimeSlot[escapedFieldName].classList.add("error");

                // set all error placeholders (p tag) textContent
                
                const errorPlaceholder = document.querySelector(
                    `.${escapedFieldName}-error`
                );
                console.log(errorPlaceholder)

                errorPlaceholder.innerHTML =
                    responseData.errors[fieldName];

                // make all placeholders visible
                errorPlaceholder.style.display = "block";
            });
        } else {
            await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)

            console.log("close");
            // successToast.showToast();
            closeTimeSlotModal();
            // document.querySelector("p.error").style.display = "none";

            // reload the page after 1 second
            setTimeout(() => {
                console.log("riody done!!!")
                location.reload();
            }, 500);
        }
    };

</script>