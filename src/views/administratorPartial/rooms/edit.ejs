<!-- ---------------------------------edit room------------------------------------ -->
<div class="edit-model-blar" style="
position: fixed;/* position: absolute; */left: 0;right: 0;top: 0;bottom: 0;z-index: 80;background-color: rgba(255, 255, 255, 0.096);backdrop-filter: blur(2px);cursor: pointer;display: none;">
</div>
<div class="" id="edit-room-modal" style="display: none;">
  <div class="modal">
    <a href="#" onclick="close_EditRoomsModal()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Add New Room</h2>
    </div>
    <div class="modal-body">
      <form id="edit-room-form">
        <!-- <p><span> Enter Room Number </span> </p> -->
        <input id="roomNumber" type="text" placeholder="enter room number" name="roomnumber" />
        <p class="edit-error roomnumber-edit-error"></p>
        <div class="howRowcloumsDiv-edit" style="display: none;">
          <div class="addRowCol ">
            <input class="houmanyCol-edit " type="number" placeholder="How many columns have ?" min="0" max="15">
            <p class="error rowsnumber-error"></p>
            <a href="#" onclick="createRowCol_edit(this)" class=" newrowcloumn newadd">add</a>
          </div>
        </div>
        <!-- <input type="text" name="rowCol"> -->

        <div class="clearAllRowcloumsDiv-edit" style="display: block; margin-top: 5px;">
          <div class="clear">
            <a href="#" onclick="clearAllRowCol_edit()" class=" clearAllRowCol newadd">Clear</a>
          </div>
        </div>

        <!-- klbkjbl -->
        <div class="rowcloumsDiv newrowscloumns-edit">

        </div>
        <p class="edit-error rowCol-edit-error"></p>
        <div class="radio radio-edit">
          <span>Student status?</span>
          <div>
            <input id="simpleRoom" type="radio" name="roomstatus" checked="checked" value="Simple Room"><span>Simple Room</span>
            <input id="bigRoom" type="radio" name="roomstatus" value="Big Room"><span>Big Room</span>
            <input id="labRoom" type="radio" name="roomstatus" value="Lab Room"><span>Lab Room</span>
          </div>
          <!-- bgkuik -->
          <p id="editRoomId" style="display: none;"></p>
          <input type="submit" value="Submit" />
      </form>
    </div>

    <!-- </div> -->
  </div>
</div>



<script>
  //-- new add createRowCol_edit
  function createRowCol_edit(value) { 
    const newrowscloumnAppend = document.querySelector(".newrowscloumns-edit")
    const houmanyColEdit = document.querySelector(".houmanyCol-edit").value
    let allRowColl = ''; 
    for (let index = 0; index < houmanyColEdit; index++) {
      let  newRowCol =`<div class="subrowcloumsDiv">
                        <input type="text" placeholder="afghgf" class="rowcloumns columnname" value ='col ${index}' name="columnname[]">
                        <input type="number" placeholder="enter rows number" class="rowcloumns rowsname"  name="rowsNumber[]">
                        <a class="openclose close " removeditem(this)>-</a>
                 </div>` 
                 allRowColl +=   newRowCol 
    }
    console.log(allRowColl)
    const valueAdd = document.querySelector('.newrowscloumns-edit')
    valueAdd.innerHTML = allRowColl;

    console.log('-----',valueAdd)
    document.querySelector(".howRowcloumsDiv-edit").style.display = "none";
    document.querySelector(".clearAllRowcloumsDiv-edit").style.display = "block";

  }

  // room edit handel 
  const editRoomModel = document.querySelector("#edit-room-modal");
  const edit_model_blar = document.querySelector(".edit-model-blar");

  function open_EditRoomsModal() {
    editRoomModel.style.display = "block";
    edit_model_blar.style.display = "block";
  }

  function close_EditRoomsModal() {
    editRoomModel.style.display = "none";
    edit_model_blar.style.display = "none";
  }
// open ana add prv value 
  function roomEditHandel(room, id) {
    open_EditRoomsModal()

    const roominfo = room.closest('.room-header');
    console.log("-------------------id---------------------",roominfo)
    // id set
    document.querySelector('#editRoomId').innerHTML =id;
    // roomNumber set
    const roomNumber = roominfo.querySelector('.roomNumber').innerHTML
    document.querySelector('#roomNumber').value =roomNumber
    // roomStatus set labRoom
    const roomStatus = roominfo.querySelector('.roomStatus').innerHTML
    if (roomStatus === "Simple Room") {
      document.querySelector('#simpleRoom').checked = true;
    } else if (roomStatus === "Big Room") {
      document.querySelector('#bigRoom').checked = true;
    } else if (roomStatus === "Lab Room") {
      document.querySelector('#labRoom').checked = true;
    }
    // room row col
    const cloumnNames = roominfo.nextElementSibling.querySelectorAll('.cloumnName')
    const rowNumbers = roominfo.nextElementSibling.querySelectorAll('.rowNumber')
   console.log( "cloumnName-",cloumnNames)
   console.log( "cloumnName-",cloumnNames.length)

    for (const cloumnName of cloumnNames) {
   console.log( "cloumnName",cloumnName.innerHTML)   
    }
    for (const rowNumber of rowNumbers) {
   console.log( "rowNumber",rowNumber.innerHTML)   
    }
    let allRowColl = ''; 
    for (let index = 0; index < cloumnNames.length; index++) {
      let  newRowCol =`<div class="subrowcloumsDiv">
                        <input type="text" placeholder="afghgf" class="rowcloumns columnname" value ='${cloumnNames[index].innerHTML.trim()}' name="columnname[]">
                        <input type="number" placeholder="enter rows number" class="rowcloumns rowsname" value ='${rowNumbers[index].innerHTML.trim()}' name="rowsNumber[]">
                        <a class="openclose close" onclick="removeditem(this)">-</a>
                 </div>` 
                 allRowColl +=   newRowCol 
    }
    console.log(allRowColl)
    const valueAdd = document.querySelector('.newrowscloumns-edit')
    valueAdd.innerHTML = allRowColl;
    console.log("-------------------id---------------------",roomNumber,roomStatus, id)
  }

// server send information
  const form_edit = document.querySelector("#edit-room-form");
  form_edit.onsubmit = async function (event) {
    event.preventDefault();
    // clear errors first---------------------------->>
    const errorPlaceholders = document.querySelectorAll("p.edit-error");
    console.log("errorPlaceholders");
    console.log(errorPlaceholders);

    for (let i = 0; i < errorPlaceholders.length; i++) {
      errorPlaceholders[i].style.display = "none";
    }

    const inputErrors = document.querySelectorAll("input.error");
    console.log("inputErrors");
    console.log(inputErrors);

    if (inputErrors.length > 0) {
      for (let j = 0; j < inputErrors.length; j++) {
        inputErrors[j].classList.remove("error");
      }
    }
    // // ------------------------------------------>>

    const formData = new FormData(form_edit);
    console.log("formData");
    console.log("formData",form_edit);
    const editRoom_Id = document.getElementById('editRoomId').innerHTML;
  console.log("111111111111111111",editRoom_Id)
  console.log("111111111111111111",editRoom_Id.innerHTML)
    console.log(formData);
    // send the request to server
    let response = await fetch(`/Administrator/Room/edit/${editRoom_Id}`, {
      method: "post",
      body: formData,
    });

    let responseData = await response.json();
    console.log("responseData",responseData);
    console.log("responseData.error",responseData.errors);

    // handle error and response
    if (responseData.errors) {
      // errors
      console.log("working go");
      await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)
      // console.log(fieldName)


      Object.keys(responseData.errors).forEach((fieldName) => {
        // add error class to all inputs
        console.log("fieldName",fieldName);
        if (!(fieldName == "rowCol")) {
          form_edit[fieldName].classList.add("error");
        }
        // set all error placeholders (p tag) textContent
        const errorPlaceholder = document.querySelector(
          `.${fieldName}-edit-error`
        );
        console.log("errorPlaceholderDown");
        console.log(errorPlaceholder);
        console.log(responseData.errors.columnname);

       console.log("---------------------",responseData.errors.rowCol)
        errorPlaceholder.innerHTML =
          responseData.errors[fieldName];

        // make all placeholders visible
        errorPlaceholder.style.display = "block";
      });
    } else {
      // success
      await showToast(responseData.msg ); 
      console.log("close");
      // successToast.showToast();
      close_EditRoomsModal();
      document.querySelector("p.edit-error").style.display = "none";

      // reload the page after 1 second
      setTimeout(() => {
        location.reload();
      },500);
    }
  };


// new value add 
  function clearAllRowCol_edit() {
    // get the parent element to be removed
    const parentElem = document.querySelector('.newrowscloumns-edit');

    // loop through each child element and remove it
    while (parentElem.firstChild) {
      parentElem.removeChild(parentElem.firstChild);
    }

    // remove the parent element itself
    // parentElem.remove();

    document.querySelector(".howRowcloumsDiv-edit").style.display = "block";
    const vv = document.querySelector(".howRowcloumsDiv-edit>input");
    console.log("vv", vv)
    document.querySelector(".clearAllRowcloumsDiv-edit").style.display = "none";
    const newrowcloumn = document.querySelector(".houmanyCol-edit")
    newrowcloumn.value = '';
  }

// remove one row col
  function removeditem(value) {
    console.log(value)
    value.parentElement.remove();
    const closebox = document.querySelectorAll(".subrowcloumsDiv")
    closebox.forEach((item, index, arr) => {
      console.log("item", item)
      item.firstElementChild.value = "col " + (index + 1)
      console.log("index", index)
      console.log("arr", arr)
    })
  }

</script>