<!-- ---------------------------------edit room------------------------------------ -->
<div class="edit-model-blar" style="
position: fixed;/* position: absolute; */left: 0;right: 0;top: 0;bottom: 0;z-index: 80;background-color: rgba(255, 255, 255, 0.096);backdrop-filter: blur(2px);cursor: pointer;display: none;">
</div>
<div class="subject-add-modal" id="edit-room-modal" style="display: none;">
    <a href="#" onclick="close_EditInvigilatorNeedModal()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Add New Room</h2>
    </div>
    <div class="modal-body">
      <form id="edit-invigilatorNedd-form">
        <!-- klbkjbl -->
        <div class=" newrowscloumns-edit">

        </div>
        <input type="submit" value="Submit" />
      </form>
    </div>

</div>



<script>
  // Function to show a toast message
  function showToast(message, isError = false) {
    Toastify({
      text: message,
      duration: 500,
      backgroundColor: isError ? "#f44336" : "",
    }).showToast();
  }
  // room edit handel 
  const editRoomModel = document.querySelector("#edit-room-modal");
  const edit_model_blar = document.querySelector(".edit-model-blar");

  function open_EditInvigilatorNeedModal() {
    editRoomModel.style.display = "block";
    edit_model_blar.style.display = "block";
  }

  function close_EditInvigilatorNeedModal() {
    editRoomModel.style.display = "none";
    edit_model_blar.style.display = "none";
  }
  // open ana add prv value 
  function invigilatorNeedEditHandel(event) {
    open_EditInvigilatorNeedModal()
    // room row col   invigilatorNeed-body-row
    const allVlaue = event.closest('.invigilatorNeed-body-row').querySelectorAll('.value-slot')
    console.log('allVlaueallVlaueallVlaueallVlaueallVlaueallVlaueallVlaueallVlaue',allVlaue[0].innerHTML)
    const date_Vlaue = event.closest('.invigilatorNeed-body-row').querySelector('.value-date')
    const Allslotname = event.closest('.invigilatorNeedInfo').querySelectorAll('.slotname')
    let date = new Date(`${date_Vlaue.innerHTML}`);
    console.log(date)
    // Extract the day, month, and year components
    var day = date.getDate();
    var month = date.getMonth() + 1; // Note: Months are zero-based, so we add 1
    var formattedMonth = month < 10 ? "0" + month : month;
    var year = date.getFullYear();
    // const rowNumbers = roominfo.nextElementSibling.querySelectorAll('.rowNumber')
    let allRowColl = '';
    allRowColl += `<div class="slot-invigilator-need">
                        <label class="invigilatorEdit-Level">Date</label>
                        <input type="date" placeholder="afghgf" class="date " value='${year}-${formattedMonth}-${day}' name="date" readonly>
                        <p class="error date-error"></p>
                      </div>`
    for (let index = 0; index < allVlaue.length; index++) {
        console.log(typeof Number(allVlaue[0].innerHTML.trim()))
        console.log(typeof (allVlaue[0].innerHTML.trim()))
      let newRowCol = `<div class="slot-invigilator-need">
                        <label class="invigilatorEdit-Level">Slot ${Allslotname[index].innerHTML.trim()} </label>
                        <input type="number" placeholder="Enter Slot Invigilator " class="slot[${index}]" value=${Number(allVlaue[index].innerHTML.trim())} name="slot[]">
                        <p class="error slot[${index}]-error"></p>
                      </div>`
      allRowColl += newRowCol
    }

    console.log(allRowColl)
    const valueAdd = document.querySelector('.newrowscloumns-edit')
    valueAdd.innerHTML = allRowColl;
  }

  // server send information
  const form_edit = document.querySelector("#edit-invigilatorNedd-form");
  form_edit.onsubmit = async function(event) {
    event.preventDefault();
    // clear errors first---------------------------->>
    const errorPlaceholders = document.querySelectorAll("p.error");
    console.log("errorPlaceholders");
    console.log(errorPlaceholders);

    for (let i = 0; i < errorPlaceholders.length; i++) {
      errorPlaceholders[i].style.display = "none";
    }

    const inputErrors = document.querySelectorAll("input.error");
    console.log("inputErrors");
    console.log(inputErrors);

    if (inputErrors.length > 0) {
      for (let j = 0; j < inputErrors.length; j++) {
        inputErrors[j].classList.remove("error");
      }
    }
    // // ------------------------------------------>>

    const formData = new FormData(form_edit);
    console.log("formData");
    console.log("formData", form_edit);
    console.log(formData);
    // send the request to server
    let response = await fetch(`/Administrator/Routine/invigilatorNeed/edit`, {
      method: "post",
      body: formData,
    });

    let responseData = await response.json();
    console.log("responseData", responseData);
    console.log("responseData.error", responseData.errors);

    // handle error and response
    if (responseData.errors) {
      // errors
      console.log("working go");
      await showToast(responseData.msg, responseData.error); // Show the toast message for 9000 milliseconds (9 seconds)
      // console.log(fieldName)


      Object.keys(responseData.errors).forEach((fieldName) => {
        // add error class to all inputs
        console.log("fieldName", fieldName);
        const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
        console.log("escapedFieldName", escapedFieldName);
        //  console.log("escapedFieldName",form[courseName]);
        //  console.log("escapedFieldName",form[inputCourseName]);
        const errorPlace = form_edit.querySelector(`.${escapedFieldName}`);
        errorPlace.classList.add("error");
        // if (!(fieldName == "rowCol")) {stu_courseName[0]
        // form[escapedFieldName].classList.add("error");
        // }

        // set all error placeholders (p tag) textContent
        const errorPlaceholder = form_edit.querySelector(`.${escapedFieldName}-error`);
        console.log("errorPlaceholderDown");
        console.log(errorPlaceholder);
        console.log();
        console.log("---------------------", fieldName)
        errorPlaceholder.innerHTML = responseData.errors[fieldName];

        // make all placeholders visible
        errorPlaceholder.style.display = "block";
      });
    } else {
      // success
      await showToast(responseData.msg);
      console.log("close");
      // successToast.showToast();
      close_EditInvigilatorNeedModal();
      // reload the page after 1 second
      setTimeout(() => {
        location.reload();
      }, 500);
    }
  };


  // new value add 
  function clearAllRowCol_edit() {
    // get the parent element to be removed
    const parentElem = document.querySelector('.newrowscloumns-edit');

    // loop through each child element and remove it
    while (parentElem.firstChild) {
      parentElem.removeChild(parentElem.firstChild);
    }

    // remove the parent element itself
    // parentElem.remove();

    document.querySelector(".howRowcloumsDiv-edit").style.display = "block";
    const vv = document.querySelector(".howRowcloumsDiv-edit>input");
    console.log("vv", vv)
    document.querySelector(".clearAllRowcloumsDiv-edit").style.display = "none";
    const newrowcloumn = document.querySelector(".houmanyCol-edit")
    newrowcloumn.value = '';
  }

  // remove one row col
  function removeditem(value) {
    console.log(value)
    value.parentElement.remove();
    const closebox = document.querySelectorAll(".subrowcloumsDiv")
    closebox.forEach((item, index, arr) => {
      console.log("item", item)
      item.firstElementChild.value = "col " + (index + 1)
      console.log("index", index)
      console.log("arr", arr)
    })
  }
</script>