<%- include(`../../administratorPartial/commonPartial/header.ejs`); %>
<%- include(`../../administratorPartial/commonPartial/menu.ejs`); %>

<body>
  <!-- <img src="./img/Char 01 (1).png" alt="Slide 1"> -->

  <section class="home-section">
    <div class="home-content">
      <div class="student-main-container">
        <div id="title">
          <h2>Student Profile</h2>
        </div>
        <div class="student-sub-container">

          <div class="short-bio">

            <div class="profile-short">
              <div class="student-img">
                <div class="avatar-upload">
                  <div class="avatar-preview">
                    <img src="<%= empProfileInfo[0].emp_ProfileImg ? empProfileInfo[0].emp_ProfileImg : '/uploads/user1.png'  %>" alt="profileImg">
                    <form action="/employee/UpdateProfileImage" method="post" enctype="multipart/form-data">
                      <div class="avatar-edit">
                        <input type='file' name="profileImg" id="profileImg" accept=".png, .jpg, .jpeg" onchange="this.form.submit()" />
                        <label for="profileImg"></label>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              <div class="profile-short-info">
                <div class="value"></div>
                <span class="student-short-item"><%= empProfileInfo[0].employeeName %></span>
                <span class="student-short-item"><%= empProfileInfo[0].employeeId %></span>
                <span class="student-short-item"><%= empProfileInfo[0].employeeEmail %></span>
                <div class="profile-pic-update">
                  <!-- <form action="/Student/uploadProfileImages" method="post" enctype="multipart/form-data">
                    <input type="file" name="profileImg" id="profileImg" accept=".png, .jpg, .jpeg" onchange="this.form.submit()">
                  </form> -->
                </div>
              </div>
              <div class="profile-edit">
                <a class="profile-edit_link" id="profile-edit" href="/employee/profile">View Prodile</a>
              </div>
            </div>
          </div>

          <div class="basicInformation">
            <div class="basicInformation-title">
              Basic Information
            </div>
            <form id="basicInformation-form" action="">
              <div class="basicInformation-all-value">
                <div  class="basicInformation-value">
                  <label for="fname">Full Name :</label>
                  <input type="text" class="employeeName" name="employeeName" value="<%= empProfileInfo[0].employeeName ? empProfileInfo[0].employeeName : '' %>" />
                  <p class="error employeeName-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Student ID:</label>
                  <input type="text" class="employeeId" name="employeeId" value="<%= empProfileInfo[0].employeeId ? empProfileInfo[0].employeeId : '' %>" readonly />
                  <p class="error employeeId-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Email :</label>
                  <input type="text" class="employeeEmail" name="employeeEmail" value="<%= empProfileInfo[0].employeeEmail ? empProfileInfo[0].employeeEmail : '' %>" readonly />
                  <p class="error employeeEmail-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Mobile :</label>
                  <input type="number" class="employeePhoneNumber" name="employeePhoneNumber" value="<%= empProfileInfo[0].employeePhoneNumber ? empProfileInfo[0].employeePhoneNumber : '' %>" />
                  <p class="error employeePhoneNumber-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Initial :</label>
                  <input type="text" class="employeeInitial" name="employeeInitial" value="<%= empProfileInfo[0].employeeInitial ? empProfileInfo[0].employeeInitial : '' %>" readonly />
                  <p class="error employeeInitial-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Designation :</label>
                  <!-- <input type="text" class="employeeDesignation" name="employeeDesignation"  />
                <p class="error employeeDesignation-error"></p> -->
                  <div class="dropdown">
                    <input class="employeeDesignation dropdown-toggle dropdown-toggle-emp-profile " type="text" value="<%= empProfileInfo[0].employeeDesignation ? empProfileInfo[0].employeeDesignation : '' %>" placeholder="Select Designation" type="text" name="employeeDesignation" readonly>
                    <i class="bx bx-chevron-down"></i>
                    <div class="dropdown-content dropdown-content-emp-profile">
                      <div class="dropdown-option"> Professor</div>
                      <div class="dropdown-option">Associate Professor</div>
                      <div class="dropdown-option">Assistant Professor</div>
                      <div class="dropdown-option">Sr. Lecturer</div>
                      <div class="dropdown-option">Lecturer</div>
                      <div class="dropdown-option">Part Time</div>
                      <div class="dropdown-option">Contractual</div>
                      <div class="dropdown-option">RA</div>
                      <div class="dropdown-option">TA</div>
                    </div>
                  </div>
                  <p class="error employeeDesignation-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Program :</label>
                  <div class="dropdown">
                    <input class="employeeProgram dropdown-toggle dropdown-toggle-emp-profile " value="<%= empProfileInfo[0].employeeProgram ? empProfileInfo[0].employeeProgram : '' %>" type="text" placeholder="Select Department" type="text" name="employeeProgram" readonly>
                    <i class="bx bx-chevron-down"></i>
                    <div class="dropdown-content dropdown-content-emp-profile">
                      <div class="dropdown-option">B.Sc. in CSE</div>
                    </div>
                  </div>
                  <p class="error employeeProgram-error"></p>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Department :</label>
                  <div class="dropdown">
                    <input class="employeeDepartment dropdown-toggle dropdown-toggle-emp-profile " value="<%= empProfileInfo[0].employeeDepartment ? empProfileInfo[0].employeeDepartment : '' %>" type="text" placeholder="Select Department" type="text" name="employeeDepartment" readonly>
                    <i class="bx bx-chevron-down"></i>
                    <div class="dropdown-content dropdown-content-emp-profile">
                      <div class="dropdown-option">Department of Computer Science and Engineering</div>
                    </div>
                  </div>
                </div>
                <div  class="basicInformation-value">
                  <label for="fname">Faculty :</label>
                  <div class="dropdown">
                    <input class="employeeFaculty dropdown-toggle dropdown-toggle-emp-profile " type="text" value="<%= empProfileInfo[0].employeeFaculty ? empProfileInfo[0].employeeFaculty : '' %>" placeholder="Select Department" type="text" name="employeeFaculty" readonly>
                    <i class="bx bx-chevron-down"></i>
                    <div class="dropdown-content dropdown-content-emp-profile">
                      <div class="dropdown-option">Faculty of Science and Information Technology</div>
                    </div>
                  </div>
                  <p class="error employeeFaculty-error"></p>
                </div>
              </div>
              <button class="newadd basicInformation-btn" onclick="basicInformationSave()">Update Information</button>
            </form>
          </div>

          <div class="academics_info">
            <div class="academics_info-title">Academics Information</div>
            <form id="academicsInfoForm" action="">
              <div id="couseInputDiv" style="margin-bottom: 2%;">
                <% for (const [index, emp_courseInfo] of empProfileInfo[0].emp_courseInfo.entries()) { %>
                <% if (index == 0) { %>
                <div class="stu_tableHeader ">
                  <p style="width: 65px;"></p>
                  <span class="courseCode_header">Course Code</span>
                  <span class="courseName_header">Course Name</span>
                  <span class="courseCredit_header">Course Cradit</span>
                  <span class="sectionName_header">Batch</span>
                  <span class="Stu_teacherInitial_header">Section </span>
                  <p class="close-input"></p>
                </div>
                <% } %>
                <div class="courseInputStudentDiv">
                  <span class="index"><%= index +1  %>.</span>
                  <div class="emp_courseCode for-Search">
                    <input type="text" class=" emp_courseCode[<%= index %>] inputCourseCode stu_table" oninput="stuCourseCodeSearch(this)" value="<%= emp_courseInfo.emp_courseCode %>" name="emp_courseCode[]" autocomplete="off">
                    <div class="emp_courseCode-search-info">
                    </div>
                  </div>
                  <div class="emp_courseName for-Search">
                    <input type="text" class="emp_courseName[<%= index %>] inputCourseName stu_table" oninput="stuCourseNameSearch(this)" value="<%= emp_courseInfo.emp_courseName %>" name="emp_courseName[]" autocomplete="off">
                    <div class="emp_courseName-search-info">
                    </div>
                  </div>
                  <div class="emp_courseCredit for-Search">
                    <input type="number" class=" emp_courseCredit[<%= index %>] inputCourseCredit stu_table" name="emp_courseCredit[]" value="<%= emp_courseInfo.emp_courseCredit %>" autocomplete="off">
                  </div>
                  <div class="emp_batch_tek for-Search">
                    <input type="text" class="emp_batch_tek[<%= index %>] inputSection stu_table" oninput="empBatchTekSearch(this)" value="<%= emp_courseInfo.emp_batch_tek %>" name="emp_batch_tek[]" autocomplete="off">
                    <div class="emp_batch_tek-search-info">
                    </div>
                  </div>
                  <div class="emp_section for-Search">
                    <input type="text" class="emp_section[<%= index %>] inputTcInitial stu_table" oninput="empSectionSearch(this)" value="<%= emp_courseInfo.emp_section %>" name="emp_section[]" autocomplete="off">
                    <div class="emp_section-search-info">
                    </div>
                  </div>
                  <!-- routinr-input-close -->
                  <div class="close-input">
                    <a onclick="removedEmpCourseInputItem(this)" class="course-input-close">+</a>
                  </div>
                </div>
                <div class="subjectInfo-error">
                  <div class="courseCode error-msg">
                    <p class="error emp_courseCode[<%= index %>]-error"></p>
                  </div>
                  <div class="courseName error-msg">
                    <p class="error emp_courseName[<%= index %>]-error"></p>
                  </div>
                  <div class="courseCradit error-msg">
                    <p class="error emp_courseCredit[<%= index %>]-error"></p>
                  </div>
                  <div class="section error-msg">
                    <p class="error emp_courseCredit[<%= index %>]-error"></p>
                  </div>
                  <div class="teacherInit error-msg">
                    <p class="error emp_section[<%= index %>]-error"></p>
                  </div>
                </div>

                <% } %>

              </div>
              <button class="newadd academics_info-add-btn" type="button" onclick="academicsInformationAdd()">Add Academics Information</button>
              <!-- <input class="newadd academics_info-add-btn" onclick="academicsInformationAdd()" value="Add Academics Information" > -->
              <button class="newadd basicInformation-btn" onclick="academicsInformationSave()">Update Information</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- frofile of your page  -->
  <!-- frofile of your page  -->

  <!-- manu open close -->
  <%- include(`../../administratorPartial/commonPartial/manuOpenCloseScript.ejs`); %>

  <!-- file upload -->
  <script>
    const fileInput = document.getElementById("profileImg");
    const selectedFileName = document.getElementById("selected-file-name");

    fileInput.addEventListener("change", function() {
      const files = fileInput.files;
      if (files.length > 0) {
        selectedFileName.textContent = files[0].name;
      } else {
        selectedFileName.textContent = "No file selected";
      }
    });
  </script>
  //dropdown ----------------------------------
  <script>
    //dropdown=---------------------------------- 

    const dropdownToggle = document.querySelectorAll('.dropdown-toggle');
    const dropdownContent = document.querySelectorAll('.dropdown-content');
    const dropdownOptions = document.querySelectorAll('.dropdown-option');
    console.log(dropdownToggle)
    dropdownToggle.forEach(function(toggle) {
      toggle.addEventListener('click', function() {
        // dropdownContent.classList.remove('hide');
        this.parentElement.classList.toggle('show');
        this.parentElement.querySelector('.dropdown-content').classList.toggle('show')
      });
    });


    dropdownOptions.forEach(function(option) {


      option.addEventListener('click', function() {
        const dropdown = this.closest('.dropdown');
        const toggle = dropdown.querySelector('.dropdown-toggle');
        const content = dropdown.querySelector('.dropdown-content');
        dropdownOptions.forEach(function(opt) {
          opt.classList.remove('active');
          opt.style.backgroundColor = '';
        });
        this.style.backgroundColor = '#52d794';
        this.classList.add('active');
        toggle.value = this.textContent;
        content.classList.remove('show');
        dropdown.classList.remove('show');
      });


      option.addEventListener('mouseenter', function() {
        if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
        }
      });

      option.addEventListener('mouseleave', function() {
        if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
        }
      });
    });
    //dropdown ----------------------
  </script>
  <!-- basic infoemation update -->
  <script>
    const basicInformationForm = document.querySelector("#basicInformation-form");

    // Function to show a toast message
    function showToast(message, isError = false) {
      Toastify({
        text: message,
        duration: 500,
        backgroundColor: isError ? "#f44336" : "",
      }).showToast();
    }



    basicInformationForm.onsubmit = async function(event) {
      event.preventDefault();
      // clear errors first---------------------------->>
      const errorPlaceholders = document.querySelectorAll("p.error");
      console.log("errorPlaceholders");
      console.log(errorPlaceholders);

      for (let i = 0; i < errorPlaceholders.length; i++) {
        errorPlaceholders[i].style.display = "none";
      }

      const inputErrors = document.querySelectorAll("input.error");
      console.log("inputErrors");
      console.log(inputErrors);

      if (inputErrors.length > 0) {
        for (let j = 0; j < inputErrors.length; j++) {
          inputErrors[j].classList.remove("error");
        }
      }
      // // ------------------------------------------>>

      const formData = new FormData(basicInformationForm);
      console.log("formData");
      console.log("formData", basicInformationForm);
      console.log(formData);
      // send the request to server
      let response = await fetch("/employee/UpdateBesicInformation", {
        method: "post",
        body: formData,
      });

      let responseData = await response.json();
      console.log("responseData", responseData);
      console.log("responseData.error", responseData.errors);

      // handle error and response
      if (responseData.errors) {
        // errors
        console.log("working go");
        await showToast(responseData.msg, responseData.error); // Show the toast message for 9000 milliseconds (9 seconds)
        // console.log(fieldName)


        Object.keys(responseData.errors).forEach((fieldName) => {
          // add error class to all inputs
          console.log("fieldName", fieldName);
          const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
          console.log("escapedFieldName", escapedFieldName);
          //  console.log("escapedFieldName",form[courseName]);
          //  console.log("escapedFieldName",form[inputCourseName]);
          const errorPlace = document.querySelector(
            `.${escapedFieldName}`
          );
          errorPlace.classList.add("error");
          // if (!(fieldName == "rowCol")) {emp_courseName[0]
          // form[escapedFieldName].classList.add("error");
          // }

          // set all error placeholders (p tag) textContent
          const errorPlaceholder = document.querySelector(
            `.${escapedFieldName}-error`
          );
          console.log("errorPlaceholderDown");
          console.log(errorPlaceholder);
          console.log();

          console.log("---------------------", fieldName)
          errorPlaceholder.innerHTML = responseData.errors[fieldName];

          // make all placeholders visible
          errorPlaceholder.style.display = "block";
        });
      } else {
        // success
        await showToast(responseData.msg);
        console.log("close");
        // successToast.showToast();
        // closeModal();
        document.querySelector("p.error").style.display = "none";

        // reload the page after 1 second
        setTimeout(() => {
          location.reload();
        }, 500);
      }
    };
  </script>
  <!-- emp Batch Tek Search search -->
  <script>
    let empBatchTekTimeout;
  async function empBatchTekSearch(event) {
    //  console.log(this)
     console.log("event",event)
     console.log("event",event.value)
    // Clear the previous timeout to reset the delay
    clearTimeout(empBatchTekTimeout);
  
    // Set a new timeout to execute after the delay (e.g., 500ms)
    empBatchTekTimeout = setTimeout(async () => {
      let response = await fetch("/Employee/courseBatch/search", {
        method: "POST",
        body: JSON.stringify({
          // Use "value" as the key instead of "value"
          value: event.value,
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        }, 
      });
      let result = await response.json();
      console.log("Routine/seatch",result); // Log the response from the server
      console.log(typeof result); // Log the response from the server
      if (!result.error) {
        if (result.searchResult.length > 0) {
          console.log(' event.target.nextSibling', event.nextElementSibling)
          let courseCodeInfo = ''
          for (const batchInfo of result.searchResult) {
            courseCodeInfo += `       
               <!--onclick="saveSubjectInfo(this)  -->
              <div class="studentBath-searchInfo-body">
                <div class="courseCode studentBath-searchInfo-value">${batchInfo.batch}</div>
              </div>
          `
          }
          courseCodeInfo += ` <a onclick="removedstudentCourseCodeSearchItem(this)" class="routinr-input-close">+</a> `
         // users_placeholder.innerHTML = generatedHtml;
         event.nextElementSibling.style.display = "block";
          event.nextElementSibling.innerHTML = courseCodeInfo;
          // search Value any side
            
            // popup.style.display = 'block';
  // any where show test
  const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
  console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
  studentBathSearchInfoItem.forEach(function (option) {
    option.addEventListener('click', function () {
      const dropdown = this.closest('.emp_batch_tek-search-info');
      studentBathSearchInfoItem.forEach(function (opt) {
        opt.classList.remove('active');
        opt.style.backgroundColor = '';
      });
      dropdown.previousElementSibling.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
      dropdown.style.display = 'none';
    });
  
    option.addEventListener('mouseenter', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '#01B3BD';
        }
    });
    option.addEventListener('mouseleave', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '';
        }
    });
  });
  
        }
      } else {
        console.log("error working")
      }
  
    }, 500);
  }
  async function removedstudentCourseCodeSearchItem(value){
  value.parentElement.previousElementSibling.value = ''
    value.previousElementSibling.remove()
    value.parentElement.style.display = "none"
  }
  
  </script>

    <!-- emp Section Search search -->
<script>
  let empSectionTimeout;
async function empSectionSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(empSectionTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  empSectionTimeout = setTimeout(async () => {
    let response = await fetch("/Employee/Section/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      }, 
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseCodeInfo = ''
        for (const sectionInfo of result.searchResult) {
          courseCodeInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${sectionInfo.sectionNames}</div>
            </div>
        `
        }
        courseCodeInfo += ` <a onclick="removedstudentCourseCodeSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseCodeInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    const dropdown = this.closest('.emp_section-search-info');
    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    dropdown.previousElementSibling.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentCourseCodeSearchItem(value){
value.parentElement.previousElementSibling.value = ''
  value.previousElementSibling.remove()
  value.parentElement.style.display = "none"
}

</script>

  <!-- course Code search -->
  <script>
    let courseCodeTimeout;
    async function stuCourseCodeSearch(event) {
      //  console.log(this)
      console.log("event", event)
      console.log("event", event.value)
      // Clear the previous timeout to reset the delay
      clearTimeout(courseCodeTimeout);

      // Set a new timeout to execute after the delay (e.g., 500ms)
      courseCodeTimeout = setTimeout(async () => {
        let response = await fetch("/Student/courseCode/search", {
          method: "POST",
          body: JSON.stringify({
            // Use "value" as the key instead of "value"
            value: event.value,
          }),
          headers: {
            "Content-type": "application/json; charset=UTF-8",
          },
        });
        let result = await response.json();
        console.log("Routine/seatch", result); // Log the response from the server
        console.log(typeof result); // Log the response from the server
        if (!result.error) {
          if (result.searchResult.length > 0) {
            console.log(' event.target.nextSibling', event.nextElementSibling)
            let courseCodeInfo = ''
            for (const courseInfo of result.searchResult) {
              courseCodeInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${courseInfo.subjectCode}</div>
              <div class="subjectName" style ='display:none'>${courseInfo.subjectName}</div>
              <div class="subjectCreadit" style ='display:none'>${courseInfo.subjectCreadit}</div>
            </div>
        `
            }
            courseCodeInfo += ` <a onclick="removedstudentCourseCodeSearchItem(this)" class="routinr-input-close">+</a> `
            // users_placeholder.innerHTML = generatedHtml;
            event.nextElementSibling.style.display = "block";
            event.nextElementSibling.innerHTML = courseCodeInfo;
            // search Value any side

            // popup.style.display = 'block';
            // any where show test
            const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
            console.log('studentBathSearchInfoItem', studentBathSearchInfoItem)
            studentBathSearchInfoItem.forEach(function(option) {
              option.addEventListener('click', function() {
                const dropdown = this.closest('.emp_courseCode-search-info');
                const emp_courseName = this.closest('.courseInputStudentDiv').querySelector('.emp_courseName').firstElementChild;
                const emp_courseCredit = this.closest('.courseInputStudentDiv').querySelector('.emp_courseCredit').firstElementChild;
                console.log('-------------', emp_courseName)

                studentBathSearchInfoItem.forEach(function(opt) {
                  opt.classList.remove('active');
                  opt.style.backgroundColor = '';
                });
                dropdown.previousElementSibling.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
                emp_courseName.value = this.querySelector('.subjectName').textContent.trim();
                emp_courseCredit.value = this.querySelector('.subjectCreadit').textContent.trim();
                dropdown.style.display = 'none';
              });

              option.addEventListener('mouseenter', function() {
                if (!this.classList.contains('active')) {
                  this.style.backgroundColor = '#01B3BD';
                }
              });
              option.addEventListener('mouseleave', function() {
                if (!this.classList.contains('active')) {
                  this.style.backgroundColor = '';
                }
              });
            });

          }
        } else {
          console.log("error working")
        }

      }, 500);
    }
    async function removedstudentCourseCodeSearchItem(value) {
      value.parentElement.previousElementSibling.value = ''
      // value.closest('.courseInputStudentDiv').remove()
      value.parentElement.style.display = "none"
    }
  </script>
  <!-- new course add  -->
  <script>
    function oneRowCol(index) {
      const newExamDateAppend = document.querySelector("#couseInputDiv")

      // underLine Div
      subjectInfoInput = `
      
      <div class="courseInputStudentDiv">
        <span class="index">${index+1}.</span>
      <div class="emp_courseCode for-Search">
        <input type="text" class=" emp_courseCode[${index}] inputCourseCode stu_table" oninput= 'stuCourseCodeSearch(this)' name="emp_courseCode[]" autocomplete="off">
        <div class="emp_courseCode-search-info">
        </div>
      </div>
      <div class="emp_courseName for-Search">
        <input type="text" class="emp_courseName[${index}] inputCourseName stu_table" oninput= 'stuCourseNameSearch(this)' name="emp_courseName[]" autocomplete="off">
        <div class="emp_courseName-search-info">
        </div>
      </div>
      <div class="emp_courseCredit for-Search">
        <input type="number" class=" emp_courseCredit[${index}] inputCourseCredit stu_table" name="emp_courseCredit[]" autocomplete="off">
      </div>
      <div class="emp_courseCredit for-Search">
        <input type="text" class="emp_batch_tek[${index}] inputBatch stu_table" oninput= 'empBatchTekSearch(this)' name="emp_batch_tek[]" autocomplete="off">
        <div class="emp_batch_tek-search-info">
        </div>
        </div>
        <div class="emp_section for-Search">
          <input type="text" class="emp_section[${index}] inputTcInitial stu_table" oninput= 'empSectionSearch(this)' name="emp_section[]" autocomplete="off">
          <div class="emp_section-search-info">
          </div>
      </div>
      <div class="close-input">
              <a onclick="removedEmpCourseInputItem(this)" class="course-input-close">+</a>
            </div>
      </div>
      <div class="subjectInfo-error">
               <div class="courseCode error-msg">
                  <p class="error emp_courseCode[${index}]-error"></p>
                </div>
                <div class="courseName error-msg">
                  <p class="error emp_courseName[${index}]-error"></p>
                </div>
                <div class="courseCradit error-msg">
                  <p class="error emp_courseCredit[${index}]-error"></p>
                </div>
                <div class="section error-msg">
                  <p class="error emp_batch_tek[${index}]-error"></p>
                </div>
                <div class="teacherInit error-msg">
                  <p class="error emp_section[${index}]-error"></p>
                </div>
      </div>
      
      `
      // newExamDateAppend.innerHTML += subjectInfoInput
      // newExamDateAppend.appendChild(subjectInfoInput)
      newExamDateAppend.insertAdjacentHTML('beforeend', subjectInfoInput);

    }

    function academicsInformationAdd() {
      const houmanyCourseAlready = document.querySelectorAll(".courseInputStudentDiv")
      console.log(houmanyCourseAlready)
      console.log(houmanyCourseAlready.length)
      oneRowCol(houmanyCourseAlready.length)
    }
    async function removedEmpCourseInputItem(value){
  value.closest('.courseInputStudentDiv').remove()
  const indexElements = document.querySelectorAll('.index');
  indexElements.forEach((value, index) => {
    value.innerHTML = `${index+1}.`;
  });
    }
  </script>
  <!-- academics infoemation update -->
  <script>
    // const academicsInfoForm = document.querySelector("#academicsInfoForm");

    // Function to show a toast message
    function showToast(message, isError = false) {
      Toastify({
        text: message,
        duration: 500,
        backgroundColor: isError ? "#f44336" : "",
      }).showToast();
    }


    function academicsInformationSave() {
      // Get the form element by its id
      const academicsInfoForm = document.getElementById("academicsInfoForm");

      // Submit the form
      // academicsInfoForm.submit();

      academicsInfoForm.onsubmit = async function(event) {
        event.preventDefault();
        // clear errors first---------------------------->>
        const errorPlaceholders = document.querySelectorAll("p.error");
        console.log("errorPlaceholders");
        console.log(errorPlaceholders);

        for (let i = 0; i < errorPlaceholders.length; i++) {
          errorPlaceholders[i].style.display = "none";
        }

        const inputErrors = document.querySelectorAll("input.error");
        console.log("inputErrors");
        console.log(inputErrors);

        if (inputErrors.length > 0) {
          for (let j = 0; j < inputErrors.length; j++) {
            inputErrors[j].classList.remove("error");
          }
        }
        // // ------------------------------------------>>

        const formData = new FormData(academicsInfoForm);
        console.log("formData");
        console.log("formData", academicsInfoForm);
        console.log(formData);
        // send the request to server
        let response = await fetch("/employee/UpdateAcademicsInformation", {
          method: "post",
          body: formData,
        });

        let responseData = await response.json();
        console.log("responseData", responseData);
        console.log("responseData.error", responseData.errors);

        // handle error and response
        if (responseData.errors) {
          // errors
          console.log("working go");
          await showToast(responseData.msg, responseData.error); // Show the toast message for 9000 milliseconds (9 seconds)
          // console.log(fieldName)


          Object.keys(responseData.errors).forEach((fieldName) => {
            // add error class to all inputs
            console.log("fieldName", fieldName);
            const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
            console.log("escapedFieldName", escapedFieldName);
            //  console.log("escapedFieldName",form[courseName]);
            //  console.log("escapedFieldName",form[inputCourseName]);
            const errorPlace = document.querySelector(
              `.${escapedFieldName}`
            );
            errorPlace.classList.add("error");
            // if (!(fieldName == "rowCol")) {emp_courseName[0]
            // form[escapedFieldName].classList.add("error");
            // }

            // set all error placeholders (p tag) textContent
            const errorPlaceholder = document.querySelector(
              `.${escapedFieldName}-error`
            );
            console.log("errorPlaceholderDown");
            console.log(errorPlaceholder);
            console.log();

            console.log("---------------------", fieldName)
            errorPlaceholder.innerHTML = responseData.errors[fieldName];

            // make all placeholders visible
            errorPlaceholder.style.display = "block";
          });
        } else {
          // success
          await showToast(responseData.msg);
          console.log("close");
          // successToast.showToast();
          // closeModal();
          document.querySelector("p.error").style.display = "none";

          // reload the page after 1 second
          setTimeout(() => {
            location.reload();
          }, 500);
        }
      };
    }
  </script>