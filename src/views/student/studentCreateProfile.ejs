<%- include(`../administratorPartial/commonPartial/header.ejs`); %>



<body >
  <!-- <img src="./img/Char 01 (1).png" alt="Slide 1"> -->

  <div class="menu-container">
    <div class="logo">
      <img src="/imges/img/74e499e046c0b7f26dafbe8d3b3ca.png" alt="Logo">
    </div>
    <div class="menu-items">
      <div class="menu-item">Home</div>
      <!-- <div class="menu-item">Log In</div> -->
      <div class="menu-item">Help Center</div>
      <div class="menu-item">Contact</div>
      <a href="/logOut"><div class="menu-item">Log out</div></a>
    </div>
  </div>

  <!-- frofile of your page  -->
  <div class="profile_student">
    <div class="profile_container">

      <div class="profile_cr">
        <p>Profile Create</p>
      </div>
      <div class="img_leftSide">
        <div class="profile_pic">
          <img style="    height: 200px; width: 200px; padding: 1rem" src="<%= studentProfilePic ? studentProfilePic : '/uploads/user1.png'  %>" alt="Profile image">
        </div>
        <div class="profilePis_uploader"> 
          <form action="/Student/uploadProfileImages" method="post" enctype="multipart/form-data">
            <input type="file" name="profileImg" id="profileImg" accept=".png, .jpg, .jpeg" onchange="this.form.submit()">
          </form>
        </div>
      </div>
      <div class="profileInfo_rightSide" style="width: 100%;">
        <form id="student-profile" >
          <div class="information_form" style=" width: 100%;display: flex; flex-direction: column; align-items: center;">
           
            <div class="basic_info" style="width: 60%; ">
              <p class="f_heading">Basic Information</p>

              <p class="label">Full Name *</p>
              <input class="studentName stu_profile_input " type="text" name="studentName" placeholder="Enter your Name" value="">
              <p class="error studentName-error"></p>

              <p class="label">Email*</p>
              <input class="studentEmail stu_profile_input" type="email" name="studentEmail" value="<%= studentEmail %>" readonly>
              <p class="error studentEmail-error"></p>

              <p class="label">Phone Number*</p>
              <input class="studentPhoneNumber stu_profile_input " type="Number" name="studentPhoneNumber" placeholder="Enter your Phone Number"  >
               <p class="error studentPhoneNumber-error"></p>



              <p class="label">Program*</p>
              <div class="stu-p-dropdown">
                <input class="studentProgram stu-p-dropdown-toggle stu-p-dropdown-toggle-emp-profile " type="text" placeholder="Select Designation"   name="studentProgram" autocomplete="off" readonly >
                <i class="bx bx-chevron-down"></i>
                <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                    <div class="stu-p-dropdown-option">B.Sc. in  CSE</div>
                </div>
              </div>
              <p class="error studentProgram-error"></p>


            </div>
            <div class="academic_info" style="width: 60%;">
              <p class="f_heading">Academic Information</p>
              <p class="label">Level *</p>
              <div class="stu-p-dropdown">
                <input class="studentLevel stu-p-dropdown-toggle stu-p-dropdown-toggle-emp-profile " type="text" placeholder="Select your Level"  name="studentLevel" autocomplete="off" readonly >
                <i class="bx bx-chevron-down"></i>
                <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                  <div class="stu-p-dropdown-option">L1</div>
                  <div class="stu-p-dropdown-option">L2</div>
                  <div class="stu-p-dropdown-option">L3</div>
                  <div class="stu-p-dropdown-option">L4</div>
                </div>
              </div>
              <p class="error studentLevel-error"></p>


              <p class="label">Term*</p>
              <div class="stu-p-dropdown">
                <input class="studentTerm stu-p-dropdown-toggle stu-p-dropdown-toggle-emp-profile " placeholder="Select your Term"  type="text"  name="studentTerm" autocomplete="off" readonly >
                <i class="bx bx-chevron-down"></i>
                <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                    <div class="stu-p-dropdown-option">T1</div>
                    <div class="stu-p-dropdown-option">T2</div>
                </div>
              </div>
              <p class="error studentTerm-error"></p>

              <p class="label">Batch*</p>
              <input class="studentBatch stu_profile_input" oninput= 'BatchSearch(this)' type="text" name="studentBatch" placeholder="Enter your Batch (Batch-53)" value="" autocomplete="off">
              <div class="studentBath-searchInfo"></div>
              <p class="error studentBatch-error"></p>


              <div class="sub_sec_craete">
                <p class="label">How many Course you taken ? *</p>
                <div class="sectionAdd" style="display: flex;">
                  <input class="howmanyCourseTaken stu_profile_input" type="Number" min="0" id="howmanyCourseTaken" name="howmanyCourseTaken" placeholder="How many Course you taken ?">
                  <a style="    height: 39px;margin: 3.74px;" onclick="createCourseSectionInputForm()" class=" newadd">add</a>
                </div>
                <p class="error howmanyCourseTaken-error"></p>

              </div>
              <div class="sub_sec_craete_clear" style="display: none;">
                <div class="" style="display: flex; justify-content: center;">
                  <a style="  height: 39px;margin: 3.74px;" onclick="clearCourseSection()" class=" newadd">Clear</a>
                </div>
              </div>
              
            </div>

            <div id="couseInputDiv" style="margin-bottom: 2%;">
            </div>
            


            <input type="submit" value="Save Profile" />

          </div>

        </form>


      </div>
    </div>
  </div>
  <!-- frofile of your page  -->

  <!--  -->
  <!-- footer start -->
  <div class="footer">
    <div class="footer_manu" style="display: flex; width: 100%;">
      <div class="short_about_diu" style=" display: flex;   flex-direction: column; flex-basis: 40%;">
        <div class="footer_diu_logo">
          <img style="width: 200px ;height: 80px;" src="/imges/img/74e499e046c0b7f26dafbe8d3b3ca.png" alt="Diu Logo">
        </div>
        <div class="short_diu" style="    width: 80%; font-size: 14px; ">
          <span>
            <p style="color: black;">Lörem ipsum od ohet dilogi. Bell trabel, samuligt, ohöbel utom
              diska.
              Jinesade bel när feras redorade i
              belogi. FAR paratyp i muvåning, och pesask vyfisat. Viktiga poddradio har un mad och
              inde.
            </p>
          </span>
        </div>
        <div class="logo_social">

        </div>
      </div>
      <div class="footer_pages" style="display: flex;  flex-direction: column; flex-basis: 20%;">
        <div class="pages_heading">Pages</div>
        <div class="footer_manu_items">
          <div class="footer-item">Home</div>
          <div class="footer-item">Log In</div>
          <div class="footer-item">Help Center</div>
          <div class="footer-item">Contact</div>
        </div>
      </div>
      <div class="helpful_link" style="display: flex;  flex-direction: column; flex-basis: 20%; ">
        <div class="helpful_link_heading">Helpful Link</div>
        <div class="helpful_link_items">
          <div class="helpful_link-item">Contact</div>
          <div class="helpful_link-item">Instruction</div>
          <div class="helpful_link-item">Help Center</div>
          <!-- <div class="helpful_link-item">Contact</div> -->
        </div>
      </div>
      <div class="footer_contact" style="display: flex;  flex-direction: column; flex-basis: 20%;">
        <div class="footer_contact_heading">Contact</div>
        <div class="footer_contact_items">
          <div class="footer_contact-item">(406) 555-0120</div>
          <div class="footer_contact-item">cseoffice@daffodilvarsity.edu.bd</div>
          <div class="footer_contact-item">Daffodil Road, Ashulia, Dhaka.</div>
        </div>
      </div>


    </div>
    <div class="footer_line"></div>
    <div class="copyright">
      Copyright © 2023 Daffodil International University. All Rights Reserved.
    </div>
  </div>
  <!-- footer End -->
  <!-- batch Search  -->
<script>
    let debounceTimeout;
  async function BatchSearch(event) {
    //  console.log(this)
     console.log("event",event)
     console.log("event",event.value)
    // Clear the previous timeout to reset the delay
    clearTimeout(debounceTimeout);

    // Set a new timeout to execute after the delay (e.g., 500ms)
    debounceTimeout = setTimeout(async () => {
      let response = await fetch("/Student/Batch/search", {
        method: "POST",
        body: JSON.stringify({
          // Use "value" as the key instead of "value"
          value: event.value,
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
      });
      let result = await response.json();
      console.log("Routine/seatch",result); // Log the response from the server
      console.log(typeof result); // Log the response from the server
      if (!result.error) {
        if (result.searchResult.length > 0) {
          console.log(' event.target.nextSibling', event.nextElementSibling)
          let courseInfo = ''
          for (const Batch of result.searchResult) {
            courseInfo += `       
               <!--onclick="saveSubjectInfo(this)  -->
              <div class="studentBath-searchInfo-body">
                <div class="courseCode studentBath-searchInfo-value">${Batch.batch}</div>
              </div>
          `
          }
          courseInfo += ` <a onclick="removedstudentBathSearchItem(this)" class="routinr-input-close">+</a> `
         // users_placeholder.innerHTML = generatedHtml;
         event.nextElementSibling.style.display = "block";
          event.nextElementSibling.innerHTML = courseInfo;
          // search Value any side
            
            // popup.style.display = 'block';
// any where show test
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
    option.addEventListener('click', function () {
      console.log('-------------',this)
      const dropdown = this.closest('.studentBath-searchInfo');
      const toggleInput = document.querySelector('.studentBatch');
      // const content = dropdown.querySelector('.stu-p-dropdown-content');
      studentBathSearchInfoItem.forEach(function (opt) {
        opt.classList.remove('active');
        opt.style.backgroundColor = '';
      });
      toggleInput.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
      dropdown.style.display = 'none';
    });

    option.addEventListener('mouseenter', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '#01B3BD';
        }
    });
    option.addEventListener('mouseleave', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '';
        }
    });
});

        }
      } else {
        console.log("error working")
      }

    }, 500);
  }
async function removedstudentBathSearchItem(value){
  value.parentElement.previousElementSibling.value = ''
    value.previousElementSibling.remove()
    value.parentElement.style.display = "none"
 }

</script>
<!-- section Search  -->
  <script>
    let sectionTimeout;
  async function stuSectionSearch(event) {
    //  console.log(this)
     console.log("event",event)
     console.log("event",event.value)
    // Clear the previous timeout to reset the delay
    clearTimeout(sectionTimeout);

    // Set a new timeout to execute after the delay (e.g., 500ms)
    sectionTimeout = setTimeout(async () => {
      let response = await fetch("/Student/section/search", {
        method: "POST",
        body: JSON.stringify({
          // Use "value" as the key instead of "value"
          value: event.value,
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
      });
      let result = await response.json();
      console.log("Routine/seatch",result); // Log the response from the server
      console.log(typeof result); // Log the response from the server
      if (!result.error) {
        if (result.searchResult.length > 0) {
          console.log(' event.target.nextSibling', event.nextElementSibling)
          let courseInfo = ''
          for (const section of result.searchResult) {
            courseInfo += `       
               <!--onclick="saveSubjectInfo(this)  -->
              <div class="studentBath-searchInfo-body">
                <div class="courseCode studentBath-searchInfo-value">${section.sectionNames}</div>
              </div>
          `
          }
          courseInfo += ` <a onclick="removedstudentBathSearchItem(this)" class="routinr-input-close">+</a> `
         // users_placeholder.innerHTML = generatedHtml;
         event.nextElementSibling.style.display = "block";
          event.nextElementSibling.innerHTML = courseInfo;
          // search Value any side
            
            // popup.style.display = 'block';
// any where show test stu_section-search-info
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
    option.addEventListener('click', function () {
      console.log('-------------',this)
      const dropdown = this.closest('.stu_section-search-info');
      const toggleInput = this.closest('.stu_section').querySelector('.inputSection');
      // const content = dropdown.querySelector('.stu-p-dropdown-content');
      studentBathSearchInfoItem.forEach(function (opt) {
        opt.classList.remove('active');
        opt.style.backgroundColor = '';
      });
      toggleInput.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
      dropdown.style.display = 'none';
    });

    option.addEventListener('mouseenter', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '#01B3BD';
        }
    });
    option.addEventListener('mouseleave', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '';
        }
    });
});

        }
      } else {
        console.log("error working")
      }

    }, 500);
  }
async function removedstudentBathSearchItem(value){
  value.parentElement.previousElementSibling.value = ''
    value.previousElementSibling.remove()
    value.parentElement.style.display = "none"
 }

</script>
<!-- InitialSearch Search  -->
<script>
  let tcInitialTimeout;
async function tcInitialSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(tcInitialTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  tcInitialTimeout = setTimeout(async () => {
    let response = await fetch("/Student/tcInitial/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseInfo = ''
        for (const tcInitial of result.searchResult) {
          courseInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${tcInitial.employeeInitial}</div>
            </div>
        `
        }
        courseInfo += ` <a onclick="removedstudentBathSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test stu_section-search-info
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    console.log('-------------',this) 
    const dropdown = this.closest('.stu_sub_tc_initial-search-info');
    const toggleInput = this.closest('.stu_sub_tc_initial').querySelector('.inputTcInitial');
    // const content = dropdown.querySelector('.stu-p-dropdown-content');
    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    toggleInput.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentBathSearchItem(value){
value.parentElement.previousElementSibling.value = ''
  value.previousElementSibling.remove()
  value.parentElement.style.display = "none"
}

</script>
<!-- course Code search -->
<script>
  let courseCodeTimeout;
async function stuCourseCodeSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(courseCodeTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  courseCodeTimeout = setTimeout(async () => {
    let response = await fetch("/Student/courseCode/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      }, 
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseCodeInfo = ''
        for (const courseInfo of result.searchResult) {
          courseCodeInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${courseInfo.subjectCode}</div>
              <div class="subjectName" style ='display:none'>${courseInfo.subjectName}</div>
              <div class="subjectCreadit" style ='display:none'>${courseInfo.subjectCreadit}</div>
            </div>
        `
        }
        courseCodeInfo += ` <a onclick="removedstudentCourseCodeSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseCodeInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    const dropdown = this.closest('.stu_courseCode-search-info');
    const stu_courseName = this.closest('.courseInputStudentDiv').querySelector('.stu_courseName').firstElementChild ;
    const stu_courseCredit = this.closest('.courseInputStudentDiv').querySelector('.stu_courseCredit').firstElementChild ;
    console.log('-------------',stu_courseName)

    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    dropdown.previousElementSibling.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    stu_courseName.value = this.querySelector('.subjectName').textContent.trim();
    stu_courseCredit.value = this.querySelector('.subjectCreadit').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentCourseCodeSearchItem(value){
value.parentElement.previousElementSibling.value = ''
  value.previousElementSibling.remove()
  value.parentElement.style.display = "none"
}

</script>
<!-- 1. manu scalling -->
<!-- 2. ctreate course info -->
  <script>
    //1. manu scalling  -----------------------------------
    var prevScrollpos = window.pageYOffset;
    window.onscroll = function() {
      var currentScrollPos = window.pageYOffset;
      if (prevScrollpos > currentScrollPos || currentScrollPos === 0) {
        document.querySelector(".menu-container").style.top = "0";
      } else {
        document.querySelector(".menu-container").style.top = "-" + document.querySelector(".menu-container").offsetHeight + "px";
      }
      prevScrollpos = currentScrollPos;
    };

    // 2. ctreate course info
    function clearCourseSection() {
      //   this.parentElement.remove();
      // get the parent element to be removed
      const parentElem = document.querySelector('#couseInputDiv');

      // loop through each child element and remove it
      while (parentElem.firstChild) {
        parentElem.removeChild(parentElem.firstChild);
      }

      // remove the parent element itself
      // parentElem.remove();

      document.querySelector(".sub_sec_craete").style.display = "block";
      document.querySelector(".sub_sec_craete_clear").style.display = "none";
      const newrowcloumn = document.querySelector("#howmanyCourseTaken")
      newrowcloumn.value = '';
    }

    function oneRowCol(index) {
      const newExamDateAppend = document.querySelector("#couseInputDiv")

      if (index == 0) {
        let header = `
            <div class="stu_tableHeader ">
              <p style = 'width: 65px;'></p>
              <span class="courseCode_header">Course Code</span>
              <span class="courseName_header">Course Name</span>
              <span class="courseCredit_header">Course Cradit</span>
              <span class="sectionName_header">Section</span>
              <span class="Stu_teacherInitial_header">Teacher In:</span>
            </div>
            `
        const newExamDateAppend = document.querySelector("#couseInputDiv")
        newExamDateAppend.innerHTML += header
      }
      //End Section InFo Input Table Header create

      // underLine Div
      subjectInfoInput = `
      
      <div class="courseInputStudentDiv">
        <span class=" ">${index+1}.</span>
      <div class="stu_courseCode for-Search">
        <input type="text" class=" stu_courseCode[${index}] inputCourseCode stu_table" oninput= 'stuCourseCodeSearch(this)' name="stu_courseCode[]" autocomplete="off">
        <div class="stu_courseCode-search-info"></div>
      </div>
      <div class="stu_courseName for-Search">
        <input type="text" class="stu_courseName[${index}] inputCourseName stu_table" oninput= 'stuCourseNameSearch(this)' name="stu_courseName[]" autocomplete="off">
        <div class="stu_courseName-search-info"></div>
      </div>
      <div class="stu_courseCredit for-Search">
        <input type="number" class=" stu_courseCredit[${index}] inputCourseCredit stu_table" name="stu_courseCredit[]" autocomplete="off">
      </div>
      <div class="stu_section for-Search">
        <input type="text" class="stu_section[${index}] inputSection stu_table" oninput= 'stuSectionSearch(this)' name="stu_section[]" autocomplete="off">
        <div class="stu_section-search-info">
        </div>
        </div>
        <div class="stu_sub_tc_initial for-Search">
          <input type="text" class="stu_sub_tc_initial[${index}] inputTcInitial stu_table" oninput= 'tcInitialSearch(this)' name="stu_sub_tc_initial[]" autocomplete="off">
          <div class="stu_sub_tc_initial-search-info">
          </div>
      </div>
      </div>
      <div class="subjectInfo-error">
               <div class="courseCode error-msg">
                  <p class="error stu_courseCode[${index}]-error"></p>
                </div>
                <div class="courseName error-msg">
                  <p class="error stu_courseName[${index}]-error"></p>
                </div>
                <div class="courseCradit error-msg">
                  <p class="error stu_courseCredit[${index}]-error"></p>
                </div>
                <div class="section error-msg">
                  <p class="error stu_section[${index}]-error"></p>
                </div>
                <div class="teacherInit error-msg">
                  <p class="error stu_sub_tc_initial[${index}]-error"></p>
                </div>
      </div>
      
      `
      newExamDateAppend.innerHTML += subjectInfoInput

      document.querySelector(".sub_sec_craete").style.display = "none";
      document.querySelector(".sub_sec_craete_clear").style.display = "block";

    }

    function createCourseSectionInputForm() {
      const houmanydate = document.querySelector("#howmanyCourseTaken")
      console.log("newrowcloumn", houmanydate.value)
      let howManyCol = houmanydate.value
      for (let index = 0; index < howManyCol; index++) {
        console.log(" is ", index)
        oneRowCol(index)
      }
    }

  </script>
  <!-- student profile info submit -->
  <script>
  const form = document.querySelector("#student-profile");

    // Function to show a toast message
function showToast(message, isError = false) {
  Toastify({
    text: message,
    duration: 500,
    backgroundColor: isError ? "#f44336" : "",
  }).showToast();
}



  form.onsubmit = async function (event) {
    event.preventDefault();
    // clear errors first---------------------------->>
    const errorPlaceholders = document.querySelectorAll("p.error");
    console.log("errorPlaceholders");
    console.log(errorPlaceholders);

    for (let i = 0; i < errorPlaceholders.length; i++) {
      errorPlaceholders[i].style.display = "none";
    }

    const inputErrors = document.querySelectorAll("input.error");
    console.log("inputErrors");
    console.log(inputErrors);

    if (inputErrors.length > 0) {
      for (let j = 0; j < inputErrors.length; j++) {
        inputErrors[j].classList.remove("error");
      }
    }
    // // ------------------------------------------>>
 
    const formData = new FormData(form);
    console.log("formData");
    console.log("formData",form);
    console.log(formData);
    // send the request to server
    let response = await fetch("/Student/createProfile", {
      method: "post",
      body: formData,
    });
    
    let responseData = await response.json();
    console.log("responseData",responseData);
    console.log("responseData.error",responseData.errors);

    // handle error and response
    if (responseData.errors) {
      // errors
      console.log("working go");
      await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)
      // console.log(fieldName)


      Object.keys(responseData.errors).forEach((fieldName) => {
        // add error class to all inputs
        console.log("fieldName",fieldName);
       const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
       console.log("escapedFieldName",escapedFieldName);  
      //  console.log("escapedFieldName",form[courseName]);
      //  console.log("escapedFieldName",form[inputCourseName]);
       const errorPlace = document.querySelector(
          `.${escapedFieldName}`
        );
        errorPlace.classList.add("error");
        // if (!(fieldName == "rowCol")) {stu_courseName[0]
          // form[escapedFieldName].classList.add("error");
        // }

        // set all error placeholders (p tag) textContent
        const errorPlaceholder = document.querySelector(
          `.${escapedFieldName}-error`
        );
        console.log("errorPlaceholderDown");
        console.log(errorPlaceholder);
        console.log();
        
       console.log("---------------------",fieldName)
        errorPlaceholder.innerHTML = responseData.errors[fieldName];

        // make all placeholders visible
        errorPlaceholder.style.display = "block";
      });
    } else {
      // success
      // await showToast(responseData.msg ); 
      console.log("close");
      // successToast.showToast();
      // closeModal();
      document.querySelector("p.error").style.display = "none";
      window.location.href = "/Student/homePage";
      // reload the page after 1 second
      // setTimeout(() => {
      //   location.reload();
      // }, 500);
    }
  };
  
  </script>
  <!-- dropdown -->
   <script>
        //stu-p-dropdown=---------------------------------- 
const dropdownToggles = document.querySelectorAll('.stu-p-dropdown-toggle');
const dropdownContents = document.querySelectorAll('.stu-p-dropdown-content');
const dropdownOptions = document.querySelectorAll('.stu-p-dropdown-option');

dropdownToggles.forEach(function (toggle) {
    toggle.addEventListener('click', function () {
      const content = this.nextElementSibling;
      this.parentElement.classList.toggle('show');
      this.parentElement.querySelector('.stu-p-dropdown-content').classList.toggle('show')
    });
  });

dropdownOptions.forEach(function (option) {
    option.addEventListener('click', function () {
      const dropdown = this.closest('.stu-p-dropdown');
      const toggle = dropdown.querySelector('.stu-p-dropdown-toggle');
      const content = dropdown.querySelector('.stu-p-dropdown-content');

      dropdownOptions.forEach(function (opt) {
        opt.classList.remove('active');
        opt.style.backgroundColor = '';
      });

      this.classList.add('active');
      toggle.value = this.textContent;
      content.classList.remove('show');
      dropdown.classList.remove('show');
    });

    option.addEventListener('mouseenter', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '#01B3BD';
        }
    });
    option.addEventListener('mouseleave', function () {
        if (!this.classList.contains('active')) {
            this.style.backgroundColor = '';
        }
    });
});
//stu-p-dropdown ----------------------
</script>
</body>


</html>