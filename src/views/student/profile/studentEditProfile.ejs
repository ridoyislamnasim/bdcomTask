<%- include(`../commonPartial/header.ejs`); %>
<%- include(`../commonPartial/studentMenu.ejs`); %>

<body>
  <!-- <img src="./img/Char 01 (1).png" alt="Slide 1"> -->

  <section class="home-section">
    <div class="home-content">
      <div class="student-main-container">
        <div id="title">
          <h2>Student Profile</h2>
        </div>
      <div class="student-sub-container">

        <div class="short-bio">

          <div class="profile-short">
            <div class="student-img">
                <div class="avatar-upload">
                    <div class="avatar-preview">
                            <img src="<%= stuProfileInfo[0].studentProfileImg ? stuProfileInfo[0].studentProfileImg : '/uploads/user1.png'  %>" alt="profileImg">
                            <form action="/Student/UpdateProfileImage" method="post" enctype="multipart/form-data">
                        <div class="avatar-edit">
                            <input type='file' name="profileImg"   id="profileImg" accept=".png, .jpg, .jpeg" onchange="this.form.submit()"/>
                            <label for="profileImg"></label>
                        </div>
                        </form>
                    </div>
                </div>
           </div>
            <div class="profile-short-info">
                <div class="value"></div>
              <span class="student-short-item"><%= stuProfileInfo[0].studentName %></span>
              <span class="student-short-item"><%= stuProfileInfo[0].studentId %></span>
              <span class="student-short-item"><%= stuProfileInfo[0].studentEmail %></span>
              <div class="profile-pic-update">
                <!-- <form action="/Student/uploadProfileImages" method="post" enctype="multipart/form-data">
                    <input type="file" name="profileImg" id="profileImg" accept=".png, .jpg, .jpeg" onchange="this.form.submit()">
                  </form> -->
              </div>
            </div>
            <div class="profile-edit">
                <a class="profile-edit_link" id="profile-edit" href="/Student/Profile">View Prodile</a>
            </div>
          </div>
        </div>

        <div class="basicInformation">
            <div class="basicInformation-title">
                Basic Information
            </div>
            <form id="basicInformation-form" action="">
            <div class="basicInformation-all-value">
              <div>
                <label for="fname">Full Name :</label>
                <input type="text" class="studentName"  name="studentName" value="<%= stuProfileInfo[0].studentName ? stuProfileInfo[0].studentName : '' %>"/>
                <p class="error studentName-error"></p>
              </div>
              <div>
                <label for="fname">Student ID:</label>
                <input type="text" class="studentId" name="studentId" value="<%= stuProfileInfo[0].studentId ? stuProfileInfo[0].studentId : '' %>"/>
                <p class="error studentId-error"></p>
              </div>
              <div>
                <label for="fname">Email :</label>
                <input type="text" class="studentEmail" name="studentEmail" value="<%= stuProfileInfo[0].studentEmail ? stuProfileInfo[0].studentEmail : '' %>" readonly/>
                <p class="error studentEmail-error"></p>
              </div>
              <div>
                <label for="fname">Mobile :</label>
                <input type="text" class="studentPhoneNumber"  name="studentPhoneNumber" value="<%= stuProfileInfo[0].studentPhoneNumber ? stuProfileInfo[0].studentPhoneNumber : '' %>"/>
                <p class="error studentPhoneNumber-error"></p>
              </div>
              <div>
                <label for="fname">Batch :</label>
                <input type="text" class="studentBatch" name="studentBatch"  value="<%= stuProfileInfo[0].studentBatch ? stuProfileInfo[0].studentBatch : '' %>" readonly/>
                <p class="error studentBatch-error"></p>
              </div>
              <div class="stu-dropdown">
                    <input class="studentProgram stu-p-dropdown-toggle  " value="<%= stuProfileInfo[0].studentProgram ? stuProfileInfo[0].studentProgram : '' %>" type="text" placeholder="Select Program"   name="studentProgram" autocomplete="off" readonly >
                    <i class="bx bx-chevron-down"></i>
                    <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                        <div class="stu-p-dropdown-option">B.Sc. in  CSE</div>
                    </div>
                <p class="error studentProgram-error"></p>
              </div>
              <div class="stu-dropdown">
                <input class="studentProgram stu-p-dropdown-toggle  " value="<%= stuProfileInfo[0].studentDepartment ? stuProfileInfo[0].studentDepartment : '' %>" type="text" placeholder="Select Department"   name="studentDepartment" autocomplete="off" readonly >
                    <i class="bx bx-chevron-down"></i>
                    <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                        <div class="stu-p-dropdown-option">Department of Computer Science and Engineering</div>
                    </div>
                <p class="error studentDepartment-error"></p>
              </div>
              <div class="stu-dropdown">
                <input class="studentProgram stu-p-dropdown-toggle  " value="<%= stuProfileInfo[0].studentFaculty ? stuProfileInfo[0].studentFaculty : '' %>" type="text" placeholder="Select Faculty"   name="studentFaculty" autocomplete="off" readonly >
                <i class="bx bx-chevron-down"></i>
                <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                    <div class="stu-p-dropdown-option">Faculty of Science and Information Technology</div>
                </div>
                <p class="error studentFaculty-error"></p>
              </div>
            </div>
            <button class="newadd basicInformation-btn" onclick="basicInformationSave()">Update Information</button>
           </form>
          </div>

        <div class="academics_info">
            <div class="academics_info-title">Academics Information</div>
            <form id="academicsInfoForm" action="">
              <div class="stu-dropdown">
                <input class="studentLevel stu-p-dropdown-toggle  " value="<%= stuProfileInfo[0].studentLevel ? stuProfileInfo[0].studentLevel : '' %>" type="text" placeholder="Select level"   name="studentLevel" autocomplete="off" readonly >
                <i class="bx bx-chevron-down"></i>
                <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                    <div class="stu-p-dropdown-option">L1</div>
                    <div class="stu-p-dropdown-option">L2</div>
                    <div class="stu-p-dropdown-option">L3</div>
                    <div class="stu-p-dropdown-option">L4</div>
                </div>
                <p class="error studentLevel-error"></p>
             </div>
             <div class="stu-dropdown">
              <input class="studentTerm stu-p-dropdown-toggle  " value="<%= stuProfileInfo[0].studentTerm ? stuProfileInfo[0].studentTerm : '' %>" type="text" placeholder="Select Term"   name="studentTerm" autocomplete="off" readonly >
              <i class="bx bx-chevron-down"></i>
              <div class="stu-p-dropdown-content stu-p-dropdown-content-profile"> 
                <div class="stu-p-dropdown-option">L1</div>
                <div class="stu-p-dropdown-option">L2</div>
              </div>
               <p class="error studentTerm-error"></p>
            </div>
            <div id="couseInputDiv" style="margin-bottom: 2%;">
            <% for (const [index, stu_courseInfo] of stuProfileInfo[0].stu_courseInfo.entries()) { %>
              <% if (index == 0) { %>
                <div class="stu_tableHeader ">
                  <p style="width: 65px;"></p>
                  <span class="courseCode_header">Course Code</span>
                  <span class="courseName_header">Course Name</span>
                  <span class="courseCredit_header">Course Cradit</span>
                  <span class="sectionName_header">Section</span>
                  <span class="Stu_teacherInitial_header">Teacher In:</span>
                  <p class="close-input"></p>
                </div>
              <% } %>
              <div class="courseInputStudentDiv">
                <span class="index"><%= index +1  %>.</span>
              <div class="stu_courseCode for-Search">
                <input type="text" class=" stu_courseCode[<%= index %>] inputCourseCode stu_table" oninput="stuCourseCodeSearch(this)" value="<%= stu_courseInfo.stu_courseCode %>" name="stu_courseCode[]" autocomplete="off">
                <div class="stu_courseCode-search-info">
                </div>
              </div>
              <div class="stu_courseName for-Search">
                <input type="text" class="stu_courseName[<%= index %>] inputCourseName stu_table" oninput="stuCourseNameSearch(this)" value="<%= stu_courseInfo.stu_courseName %>" name="stu_courseName[]" autocomplete="off">
                <div class="stu_courseName-search-info">
                </div>
              </div>
              <div class="stu_courseCredit for-Search">
                <input type="number" class=" stu_courseCredit[<%= index %>] inputCourseCredit stu_table" name="stu_courseCredit[]" value="<%= stu_courseInfo.stu_courseCredit %>" autocomplete="off">
              </div>
              <div class="stu_section for-Search">
                <input type="text" class="stu_section[<%= index %>] inputSection stu_table" oninput="stuSectionSearch(this)" value="<%= stu_courseInfo.stu_section %>" name="stu_section[]" autocomplete="off">
                <div class="stu_section-search-info">
                </div>
                </div>
                <div class="stu_sub_tc_initial for-Search">
                  <input type="text" class="stu_sub_tc_initial[<%= index %>] inputTcInitial stu_table" oninput="tcInitialSearch(this)" value="<%= stu_courseInfo.stu_sub_tc_initial %>" name="stu_sub_tc_initial[]" autocomplete="off">
                  <div class="stu_sub_tc_initial-search-info">
                  </div>
              </div>
              <!-- routinr-input-close -->
              <div class="close-input">
              <a onclick="removedstudentCourseInputItem(this)" class="course-input-close">+</a>
            </div>
              </div>
              <div class="subjectInfo-error">
                      <div class="courseCode error-msg">
                          <p class="error stu_courseCode[<%= index %>]-error"></p>
                        </div>
                        <div class="courseName error-msg">
                          <p class="error stu_courseName[<%= index %>]-error"></p>
                        </div>
                        <div class="courseCradit error-msg">
                          <p class="error stu_courseCredit[<%= index %>]-error"></p>
                        </div>
                        <div class="section error-msg">
                          <p class="error stu_section[<%= index %>]-error"></p>
                        </div>
                        <div class="teacherInit error-msg">
                          <p class="error stu_sub_tc_initial[<%= index %>]-error"></p>
                        </div>
              </div>

              <% } %>

            </div>
            <button class="newadd academics_info-add-btn" type="button" onclick="academicsInformationAdd()">Add Academics Information</button>
          <!-- <input class="newadd academics_info-add-btn" onclick="academicsInformationAdd()" value="Add Academics Information" > -->
        <button class="newadd basicInformation-btn" onclick="academicsInformationSave()">Update Information</button>
      </form>
        </div>
        </div>
      </div>
    </div>
  </section>

  <!-- frofile of your page  -->
  <!-- frofile of your page  -->

  <!-- manu open close -->
  <%- include(`../commonPartial/manuOpenCloseScript.ejs`); %>

  <!-- file upload -->
  <script>
    const fileInput = document.getElementById("profileImg");
    const selectedFileName = document.getElementById("selected-file-name");

    fileInput.addEventListener("change", function() {
      const files = fileInput.files;
      if (files.length > 0) {
        selectedFileName.textContent = files[0].name;
      } else {
        selectedFileName.textContent = "No file selected";
      }
    });


  </script>
    <!-- dropdown -->
    <script>
      //stu-p-dropdown=---------------------------------- 
const dropdownToggles = document.querySelectorAll('.stu-p-dropdown-toggle');
const dropdownContents = document.querySelectorAll('.stu-p-dropdown-content');
const dropdownOptions = document.querySelectorAll('.stu-p-dropdown-option');

dropdownToggles.forEach(function (toggle) {
  toggle.addEventListener('click', function () {
    const content = this.nextElementSibling;
    this.parentElement.classList.toggle('show');
    this.parentElement.querySelector('.stu-p-dropdown-content').classList.toggle('show')
  });
});

dropdownOptions.forEach(function (option) {
  option.addEventListener('click', function () {
    const dropdown = this.closest('.stu-dropdown');
    const toggle = dropdown.querySelector('.stu-p-dropdown-toggle');
    const content = dropdown.querySelector('.stu-p-dropdown-content');

    dropdownOptions.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });

    this.classList.add('active');
    toggle.value = this.textContent;
    content.classList.remove('show');
    dropdown.classList.remove('show');
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});
//stu-p-dropdown ----------------------
</script>
<!-- basic infoemation update -->
<script>
  const basicInformationForm = document.querySelector("#basicInformation-form");

// Function to show a toast message
function showToast(message, isError = false) {
Toastify({
text: message,
duration: 500,
backgroundColor: isError ? "#f44336" : "",
}).showToast();
}



basicInformationForm.onsubmit = async function (event) {
event.preventDefault();
// clear errors first---------------------------->>
const errorPlaceholders = document.querySelectorAll("p.error");
console.log("errorPlaceholders");
console.log(errorPlaceholders);

for (let i = 0; i < errorPlaceholders.length; i++) {
  errorPlaceholders[i].style.display = "none";
}

const inputErrors = document.querySelectorAll("input.error");
console.log("inputErrors");
console.log(inputErrors);

if (inputErrors.length > 0) {
  for (let j = 0; j < inputErrors.length; j++) {
    inputErrors[j].classList.remove("error");
  }
}
// // ------------------------------------------>>

const formData = new FormData(basicInformationForm);
console.log("formData");
console.log("formData",basicInformationForm);
console.log(formData);
// send the request to server
let response = await fetch("/Student/UpdateBesicInformation", {
  method: "post",
  body: formData,
});

let responseData = await response.json();
console.log("responseData",responseData);
console.log("responseData.error",responseData.errors);

// handle error and response
if (responseData.errors) {
  // errors
  console.log("working go");
  await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)
  // console.log(fieldName)


  Object.keys(responseData.errors).forEach((fieldName) => {
    // add error class to all inputs
    console.log("fieldName",fieldName);
   const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
   console.log("escapedFieldName",escapedFieldName);  
  //  console.log("escapedFieldName",form[courseName]);
  //  console.log("escapedFieldName",form[inputCourseName]);
   const errorPlace = document.querySelector(
      `.${escapedFieldName}`
    );
    errorPlace.classList.add("error");
    // if (!(fieldName == "rowCol")) {stu_courseName[0]
      // form[escapedFieldName].classList.add("error");
    // }

    // set all error placeholders (p tag) textContent
    const errorPlaceholder = document.querySelector(
      `.${escapedFieldName}-error`
    );
    console.log("errorPlaceholderDown");
    console.log(errorPlaceholder);
    console.log();
    
   console.log("---------------------",fieldName)
    errorPlaceholder.innerHTML = responseData.errors[fieldName];

    // make all placeholders visible
    errorPlaceholder.style.display = "block";
  });
} else {
  // success
  await showToast(responseData.msg ); 
  console.log("close");
  // successToast.showToast();
  // closeModal();
  document.querySelector("p.error").style.display = "none";
  
  // reload the page after 1 second
  setTimeout(() => {
    location.reload();
  }, 500);
}
};

</script>

<!-- section Search  --> stu_courseCode-search-info
<script>
  let sectionTimeout;
async function stuSectionSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(sectionTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  sectionTimeout = setTimeout(async () => {
    let response = await fetch("/Student/section/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseInfo = ''
        for (const section of result.searchResult) {
          courseInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${section.sectionNames}</div>
            </div>
        `
        }
        courseInfo += ` <a onclick="removedstudentBathSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test stu_section-search-info
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    console.log('-------------',this)
    const dropdown = this.closest('.stu_section-search-info');
    const toggleInput = this.closest('.stu_section').querySelector('.inputSection');
    // const content = dropdown.querySelector('.stu-p-dropdown-content');
    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    toggleInput.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentBathSearchItem(value){
value.parentElement.previousElementSibling.value = ''
//   value.previousElementSibling.remove()
  value.parentElement.style.display = "none"
}

</script>
<!-- InitialSearch Search  -->
<script>
  let tcInitialTimeout;
async function tcInitialSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(tcInitialTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  tcInitialTimeout = setTimeout(async () => {
    let response = await fetch("/Student/tcInitial/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseInfo = ''
        for (const tcInitial of result.searchResult) {
          courseInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${tcInitial.employeeInitial}</div>
            </div>
        `
        }
        courseInfo += ` <a onclick="removedstudentTcInitialSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test stu_section-search-info
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    console.log('-------------',this) 
    const dropdown = this.closest('.stu_sub_tc_initial-search-info');
    const toggleInput = this.closest('.stu_sub_tc_initial').querySelector('.inputTcInitial');
    // const content = dropdown.querySelector('.stu-p-dropdown-content');
    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    toggleInput.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentTcInitialSearchItem(value){
value.parentElement.previousElementSibling.value = ''
//   value.previousElementSibling.remove()
  value.parentElement.style.display = "none"
}

</script>
<!-- course Code search -->
<script>
  let courseCodeTimeout;
async function stuCourseCodeSearch(event) {
  //  console.log(this)
   console.log("event",event)
   console.log("event",event.value)
  // Clear the previous timeout to reset the delay
  clearTimeout(courseCodeTimeout);

  // Set a new timeout to execute after the delay (e.g., 500ms)
  courseCodeTimeout = setTimeout(async () => {
    let response = await fetch("/Student/courseCode/search", {
      method: "POST",
      body: JSON.stringify({
        // Use "value" as the key instead of "value"
        value: event.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      }, 
    });
    let result = await response.json();
    console.log("Routine/seatch",result); // Log the response from the server
    console.log(typeof result); // Log the response from the server
    if (!result.error) {
      if (result.searchResult.length > 0) {
        console.log(' event.target.nextSibling', event.nextElementSibling)
        let courseCodeInfo = ''
        for (const courseInfo of result.searchResult) {
          courseCodeInfo += `       
             <!--onclick="saveSubjectInfo(this)  -->
            <div class="studentBath-searchInfo-body">
              <div class="courseCode studentBath-searchInfo-value">${courseInfo.subjectCode}</div>
              <div class="subjectName" style ='display:none'>${courseInfo.subjectName}</div>
              <div class="subjectCreadit" style ='display:none'>${courseInfo.subjectCreadit}</div>
            </div>
        `
        }
        courseCodeInfo += ` <a onclick="removedstudentCourseCodeSearchItem(this)" class="routinr-input-close">+</a> `
       // users_placeholder.innerHTML = generatedHtml;
       event.nextElementSibling.style.display = "block";
        event.nextElementSibling.innerHTML = courseCodeInfo;
        // search Value any side
          
          // popup.style.display = 'block';
// any where show test
const studentBathSearchInfoItem = document.querySelectorAll('.studentBath-searchInfo-body');
console.log('studentBathSearchInfoItem',studentBathSearchInfoItem)
studentBathSearchInfoItem.forEach(function (option) {
  option.addEventListener('click', function () {
    const dropdown = this.closest('.stu_courseCode-search-info');
    const stu_courseName = this.closest('.courseInputStudentDiv').querySelector('.stu_courseName').firstElementChild ;
    const stu_courseCredit = this.closest('.courseInputStudentDiv').querySelector('.stu_courseCredit').firstElementChild ;
    console.log('-------------',stu_courseName)

    studentBathSearchInfoItem.forEach(function (opt) {
      opt.classList.remove('active');
      opt.style.backgroundColor = '';
    });
    dropdown.previousElementSibling.value = this.querySelector('.studentBath-searchInfo-value').textContent.trim();
    stu_courseName.value = this.querySelector('.subjectName').textContent.trim();
    stu_courseCredit.value = this.querySelector('.subjectCreadit').textContent.trim();
    dropdown.style.display = 'none';
  });

  option.addEventListener('mouseenter', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '#01B3BD';
      }
  });
  option.addEventListener('mouseleave', function () {
      if (!this.classList.contains('active')) {
          this.style.backgroundColor = '';
      }
  });
});

      }
    } else {
      console.log("error working")
    }

  }, 500);
}
async function removedstudentCourseCodeSearchItem(value){
value.parentElement.previousElementSibling.value = ''
  // value.closest('.courseInputStudentDiv').remove()
  value.parentElement.style.display = "none"
}

</script>
<!-- new course add  -->
<script>
      function oneRowCol(index) {
      const newExamDateAppend = document.querySelector("#couseInputDiv")

      // underLine Div
      subjectInfoInput = `
      
      <div class="courseInputStudentDiv">
        <span class="index">${index+1}.</span>
      <div class="stu_courseCode for-Search">
        <input type="text" class=" stu_courseCode[${index}] inputCourseCode stu_table" oninput= 'stuCourseCodeSearch(this)' name="stu_courseCode[]" autocomplete="off">
        <div class="stu_courseCode-search-info">
        </div>
      </div>
      <div class="stu_courseName for-Search">
        <input type="text" class="stu_courseName[${index}] inputCourseName stu_table" oninput= 'stuCourseNameSearch(this)' name="stu_courseName[]" autocomplete="off">
        <div class="stu_courseName-search-info">
        </div>
      </div>
      <div class="stu_courseCredit for-Search">
        <input type="number" class=" stu_courseCredit[${index}] inputCourseCredit stu_table" name="stu_courseCredit[]" autocomplete="off">
      </div>
      <div class="stu_section for-Search">
        <input type="text" class="stu_section[${index}] inputSection stu_table" oninput= 'stuSectionSearch(this)' name="stu_section[]" autocomplete="off">
        <div class="stu_section-search-info">
        </div>
        </div>
        <div class="stu_sub_tc_initial for-Search">
          <input type="text" class="stu_sub_tc_initial[${index}] inputTcInitial stu_table" oninput= 'tcInitialSearch(this)' name="stu_sub_tc_initial[]" autocomplete="off">
          <div class="stu_sub_tc_initial-search-info">
          </div>
      </div>
      <div class="close-input">
              <a onclick="removedstudentCourseInputItem(this)" class="course-input-close">+</a>
            </div>
      </div>
      <div class="subjectInfo-error">
               <div class="courseCode error-msg">
                  <p class="error stu_courseCode[${index}]-error"></p>
                </div>
                <div class="courseName error-msg">
                  <p class="error stu_courseName[${index}]-error"></p>
                </div>
                <div class="courseCradit error-msg">
                  <p class="error stu_courseCredit[${index}]-error"></p>
                </div>
                <div class="section error-msg">
                  <p class="error stu_section[${index}]-error"></p>
                </div>
                <div class="teacherInit error-msg">
                  <p class="error stu_sub_tc_initial[${index}]-error"></p>
                </div>
      </div>
      
      `
      // newExamDateAppend.innerHTML += subjectInfoInput
      newExamDateAppend.insertAdjacentHTML('beforeend', subjectInfoInput);

      // document.querySelector(".sub_sec_craete").style.display = "none";
      // document.querySelector(".sub_sec_craete_clear").style.display = "block";

    }

    function academicsInformationAdd() {
      const houmanyCourseAlready = document.querySelectorAll(".courseInputStudentDiv")
      console.log(houmanyCourseAlready)
      console.log(houmanyCourseAlready.length)
      oneRowCol(houmanyCourseAlready.length)
    }
    async function removedstudentCourseInputItem(value){
  value.closest('.courseInputStudentDiv').remove()
  const indexElements = document.querySelectorAll('.index');
  indexElements.forEach((value, index) => {
    value.innerHTML = `${index+1}.`;
  });
    }
</script>
<!-- academics infoemation update -->
<script>


  // const academicsInfoForm = document.querySelector("#academicsInfoForm");

// Function to show a toast message
function showToast(message, isError = false) {
Toastify({
text: message,
duration: 500,
backgroundColor: isError ? "#f44336" : "",
}).showToast();
}


function academicsInformationSave() {
    // Get the form element by its id
    const academicsInfoForm = document.getElementById("academicsInfoForm");

    // Submit the form
    // academicsInfoForm.submit();

academicsInfoForm.onsubmit = async function (event) {
event.preventDefault();
// clear errors first---------------------------->>
const errorPlaceholders = document.querySelectorAll("p.error");
console.log("errorPlaceholders");
console.log(errorPlaceholders);

for (let i = 0; i < errorPlaceholders.length; i++) {
  errorPlaceholders[i].style.display = "none";
}

const inputErrors = document.querySelectorAll("input.error");
console.log("inputErrors");
console.log(inputErrors);

if (inputErrors.length > 0) {
  for (let j = 0; j < inputErrors.length; j++) {
    inputErrors[j].classList.remove("error");
  }
}
// // ------------------------------------------>>

const formData = new FormData(academicsInfoForm);
console.log("formData");
console.log("formData",academicsInfoForm);
console.log(formData);
// send the request to server
let response = await fetch("/Student/UpdateAcademicsInformation", {
  method: "post",
  body: formData,
});

let responseData = await response.json();
console.log("responseData",responseData);
console.log("responseData.error",responseData.errors);

// handle error and response
if (responseData.errors) {
  // errors
  console.log("working go");
  await showToast(responseData.msg,responseData.error ); // Show the toast message for 9000 milliseconds (9 seconds)
  // console.log(fieldName)


  Object.keys(responseData.errors).forEach((fieldName) => {
    // add error class to all inputs
    console.log("fieldName",fieldName);
   const escapedFieldName = fieldName.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
   console.log("escapedFieldName",escapedFieldName);  
  //  console.log("escapedFieldName",form[courseName]);
  //  console.log("escapedFieldName",form[inputCourseName]);
   const errorPlace = document.querySelector(
      `.${escapedFieldName}`
    );
    errorPlace.classList.add("error");
    // if (!(fieldName == "rowCol")) {stu_courseName[0]
      // form[escapedFieldName].classList.add("error");
    // }

    // set all error placeholders (p tag) textContent
    const errorPlaceholder = document.querySelector(
      `.${escapedFieldName}-error`
    );
    console.log("errorPlaceholderDown");
    console.log(errorPlaceholder);
    console.log();
    
   console.log("---------------------",fieldName)
    errorPlaceholder.innerHTML = responseData.errors[fieldName];

    // make all placeholders visible
    errorPlaceholder.style.display = "block";
  });
} else {
  // success
  await showToast(responseData.msg ); 
  console.log("close");
  // successToast.showToast();
  // closeModal();
  document.querySelector("p.error").style.display = "none";
  
  // reload the page after 1 second
  setTimeout(() => {
    location.reload();
  }, 500);
}
};
}
</script>
    

  